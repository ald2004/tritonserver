// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_config.proto

#include "model_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchInput_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchOutput_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelConfig_CcModelFilenamesEntry_DoNotUse_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelConfig_MetricTagsEntry_DoNotUse_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelConfig_ParametersEntry_DoNotUse_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelDynamicBatching_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelEnsembling_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelEnsembling_Step_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelEnsembling_Step_InputMapEntry_DoNotUse_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelEnsembling_Step_OutputMapEntry_DoNotUse_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelInput_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelInstanceGroup_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOperations_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ModelOptimizationPolicy_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_Cuda_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_Shape_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_ExecutionAccelerators_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOptimizationPolicy_Graph_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOptimizationPolicy_PinnedMemoryBuffer_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOutput_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelParameter_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelQueuePolicy_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRateLimiter_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRateLimiter_Resource_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModelSequenceBatching_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelSequenceBatching_Control_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelSequenceBatching_ControlInput_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelSequenceBatching_StrategyDirect_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelSequenceBatching_StrategyOldest_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelTensorReshape_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelTransactionPolicy_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModelVersionPolicy_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelVersionPolicy_All_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelVersionPolicy_Latest_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelVersionPolicy_Specific_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelWarmup_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelWarmup_Input_model_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelWarmup_InputsEntry_DoNotUse_model_5fconfig_2eproto;
namespace inference {
class ModelRateLimiter_ResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRateLimiter_Resource> _instance;
} _ModelRateLimiter_Resource_default_instance_;
class ModelRateLimiterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelRateLimiter> _instance;
} _ModelRateLimiter_default_instance_;
class ModelInstanceGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelInstanceGroup> _instance;
} _ModelInstanceGroup_default_instance_;
class ModelTensorReshapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelTensorReshape> _instance;
} _ModelTensorReshape_default_instance_;
class ModelInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelInput> _instance;
} _ModelInput_default_instance_;
class ModelOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOutput> _instance;
} _ModelOutput_default_instance_;
class BatchInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchInput> _instance;
} _BatchInput_default_instance_;
class BatchOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchOutput> _instance;
} _BatchOutput_default_instance_;
class ModelVersionPolicy_LatestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelVersionPolicy_Latest> _instance;
} _ModelVersionPolicy_Latest_default_instance_;
class ModelVersionPolicy_AllDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelVersionPolicy_All> _instance;
} _ModelVersionPolicy_All_default_instance_;
class ModelVersionPolicy_SpecificDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelVersionPolicy_Specific> _instance;
} _ModelVersionPolicy_Specific_default_instance_;
class ModelVersionPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelVersionPolicy> _instance;
} _ModelVersionPolicy_default_instance_;
class ModelOptimizationPolicy_GraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy_Graph> _instance;
} _ModelOptimizationPolicy_Graph_default_instance_;
class ModelOptimizationPolicy_Cuda_GraphSpec_ShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy_Cuda_GraphSpec_Shape> _instance;
} _ModelOptimizationPolicy_Cuda_GraphSpec_Shape_default_instance_;
class ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse> _instance;
} _ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse_default_instance_;
class ModelOptimizationPolicy_Cuda_GraphSpec_LowerBoundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound> _instance;
} _ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_default_instance_;
class ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse> _instance;
} _ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse_default_instance_;
class ModelOptimizationPolicy_Cuda_GraphSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy_Cuda_GraphSpec> _instance;
} _ModelOptimizationPolicy_Cuda_GraphSpec_default_instance_;
class ModelOptimizationPolicy_CudaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy_Cuda> _instance;
} _ModelOptimizationPolicy_Cuda_default_instance_;
class ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse> _instance;
} _ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse_default_instance_;
class ModelOptimizationPolicy_ExecutionAccelerators_AcceleratorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy_ExecutionAccelerators_Accelerator> _instance;
} _ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_default_instance_;
class ModelOptimizationPolicy_ExecutionAcceleratorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy_ExecutionAccelerators> _instance;
} _ModelOptimizationPolicy_ExecutionAccelerators_default_instance_;
class ModelOptimizationPolicy_PinnedMemoryBufferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy_PinnedMemoryBuffer> _instance;
} _ModelOptimizationPolicy_PinnedMemoryBuffer_default_instance_;
class ModelOptimizationPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOptimizationPolicy> _instance;
} _ModelOptimizationPolicy_default_instance_;
class ModelQueuePolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelQueuePolicy> _instance;
} _ModelQueuePolicy_default_instance_;
class ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse> _instance;
} _ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse_default_instance_;
class ModelDynamicBatchingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelDynamicBatching> _instance;
} _ModelDynamicBatching_default_instance_;
class ModelSequenceBatching_ControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelSequenceBatching_Control> _instance;
} _ModelSequenceBatching_Control_default_instance_;
class ModelSequenceBatching_ControlInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelSequenceBatching_ControlInput> _instance;
} _ModelSequenceBatching_ControlInput_default_instance_;
class ModelSequenceBatching_StrategyDirectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelSequenceBatching_StrategyDirect> _instance;
} _ModelSequenceBatching_StrategyDirect_default_instance_;
class ModelSequenceBatching_StrategyOldestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelSequenceBatching_StrategyOldest> _instance;
} _ModelSequenceBatching_StrategyOldest_default_instance_;
class ModelSequenceBatchingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelSequenceBatching> _instance;
} _ModelSequenceBatching_default_instance_;
class ModelEnsembling_Step_InputMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelEnsembling_Step_InputMapEntry_DoNotUse> _instance;
} _ModelEnsembling_Step_InputMapEntry_DoNotUse_default_instance_;
class ModelEnsembling_Step_OutputMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelEnsembling_Step_OutputMapEntry_DoNotUse> _instance;
} _ModelEnsembling_Step_OutputMapEntry_DoNotUse_default_instance_;
class ModelEnsembling_StepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelEnsembling_Step> _instance;
} _ModelEnsembling_Step_default_instance_;
class ModelEnsemblingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelEnsembling> _instance;
} _ModelEnsembling_default_instance_;
class ModelParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelParameter> _instance;
} _ModelParameter_default_instance_;
class ModelWarmup_InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelWarmup_Input> _instance;
} _ModelWarmup_Input_default_instance_;
class ModelWarmup_InputsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelWarmup_InputsEntry_DoNotUse> _instance;
} _ModelWarmup_InputsEntry_DoNotUse_default_instance_;
class ModelWarmupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelWarmup> _instance;
} _ModelWarmup_default_instance_;
class ModelOperationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOperations> _instance;
} _ModelOperations_default_instance_;
class ModelTransactionPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelTransactionPolicy> _instance;
} _ModelTransactionPolicy_default_instance_;
class ModelConfig_CcModelFilenamesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelConfig_CcModelFilenamesEntry_DoNotUse> _instance;
} _ModelConfig_CcModelFilenamesEntry_DoNotUse_default_instance_;
class ModelConfig_MetricTagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelConfig_MetricTagsEntry_DoNotUse> _instance;
} _ModelConfig_MetricTagsEntry_DoNotUse_default_instance_;
class ModelConfig_ParametersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelConfig_ParametersEntry_DoNotUse> _instance;
} _ModelConfig_ParametersEntry_DoNotUse_default_instance_;
class ModelConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelConfig> _instance;
} _ModelConfig_default_instance_;
}  // namespace inference
static void InitDefaultsscc_info_BatchInput_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_BatchInput_default_instance_;
    new (ptr) ::inference::BatchInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchInput_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BatchInput_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_BatchOutput_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_BatchOutput_default_instance_;
    new (ptr) ::inference::BatchOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchOutput_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BatchOutput_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelConfig_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelConfig_default_instance_;
    new (ptr) ::inference::ModelConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_ModelConfig_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 16, 0, InitDefaultsscc_info_ModelConfig_model_5fconfig_2eproto}, {
      &scc_info_ModelVersionPolicy_model_5fconfig_2eproto.base,
      &scc_info_ModelInput_model_5fconfig_2eproto.base,
      &scc_info_ModelOutput_model_5fconfig_2eproto.base,
      &scc_info_BatchInput_model_5fconfig_2eproto.base,
      &scc_info_BatchOutput_model_5fconfig_2eproto.base,
      &scc_info_ModelOptimizationPolicy_model_5fconfig_2eproto.base,
      &scc_info_ModelDynamicBatching_model_5fconfig_2eproto.base,
      &scc_info_ModelSequenceBatching_model_5fconfig_2eproto.base,
      &scc_info_ModelEnsembling_model_5fconfig_2eproto.base,
      &scc_info_ModelInstanceGroup_model_5fconfig_2eproto.base,
      &scc_info_ModelConfig_CcModelFilenamesEntry_DoNotUse_model_5fconfig_2eproto.base,
      &scc_info_ModelConfig_MetricTagsEntry_DoNotUse_model_5fconfig_2eproto.base,
      &scc_info_ModelConfig_ParametersEntry_DoNotUse_model_5fconfig_2eproto.base,
      &scc_info_ModelWarmup_model_5fconfig_2eproto.base,
      &scc_info_ModelOperations_model_5fconfig_2eproto.base,
      &scc_info_ModelTransactionPolicy_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelConfig_CcModelFilenamesEntry_DoNotUse_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelConfig_CcModelFilenamesEntry_DoNotUse_default_instance_;
    new (ptr) ::inference::ModelConfig_CcModelFilenamesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelConfig_CcModelFilenamesEntry_DoNotUse_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelConfig_CcModelFilenamesEntry_DoNotUse_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelConfig_MetricTagsEntry_DoNotUse_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelConfig_MetricTagsEntry_DoNotUse_default_instance_;
    new (ptr) ::inference::ModelConfig_MetricTagsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelConfig_MetricTagsEntry_DoNotUse_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelConfig_MetricTagsEntry_DoNotUse_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelConfig_ParametersEntry_DoNotUse_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelConfig_ParametersEntry_DoNotUse_default_instance_;
    new (ptr) ::inference::ModelConfig_ParametersEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelConfig_ParametersEntry_DoNotUse_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelConfig_ParametersEntry_DoNotUse_model_5fconfig_2eproto}, {
      &scc_info_ModelParameter_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelDynamicBatching_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelDynamicBatching_default_instance_;
    new (ptr) ::inference::ModelDynamicBatching();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelDynamicBatching_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelDynamicBatching_model_5fconfig_2eproto}, {
      &scc_info_ModelQueuePolicy_model_5fconfig_2eproto.base,
      &scc_info_ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse_default_instance_;
    new (ptr) ::inference::ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse_model_5fconfig_2eproto}, {
      &scc_info_ModelQueuePolicy_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelEnsembling_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelEnsembling_default_instance_;
    new (ptr) ::inference::ModelEnsembling();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelEnsembling_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelEnsembling_model_5fconfig_2eproto}, {
      &scc_info_ModelEnsembling_Step_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelEnsembling_Step_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelEnsembling_Step_default_instance_;
    new (ptr) ::inference::ModelEnsembling_Step();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelEnsembling_Step_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelEnsembling_Step_model_5fconfig_2eproto}, {
      &scc_info_ModelEnsembling_Step_InputMapEntry_DoNotUse_model_5fconfig_2eproto.base,
      &scc_info_ModelEnsembling_Step_OutputMapEntry_DoNotUse_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelEnsembling_Step_InputMapEntry_DoNotUse_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelEnsembling_Step_InputMapEntry_DoNotUse_default_instance_;
    new (ptr) ::inference::ModelEnsembling_Step_InputMapEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelEnsembling_Step_InputMapEntry_DoNotUse_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelEnsembling_Step_InputMapEntry_DoNotUse_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelEnsembling_Step_OutputMapEntry_DoNotUse_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelEnsembling_Step_OutputMapEntry_DoNotUse_default_instance_;
    new (ptr) ::inference::ModelEnsembling_Step_OutputMapEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelEnsembling_Step_OutputMapEntry_DoNotUse_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelEnsembling_Step_OutputMapEntry_DoNotUse_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelInput_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelInput_default_instance_;
    new (ptr) ::inference::ModelInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelInput_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelInput_model_5fconfig_2eproto}, {
      &scc_info_ModelTensorReshape_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelInstanceGroup_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelInstanceGroup_default_instance_;
    new (ptr) ::inference::ModelInstanceGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelInstanceGroup_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelInstanceGroup_model_5fconfig_2eproto}, {
      &scc_info_ModelRateLimiter_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelOperations_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOperations_default_instance_;
    new (ptr) ::inference::ModelOperations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOperations_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelOperations_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ModelOptimizationPolicy_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ModelOptimizationPolicy_model_5fconfig_2eproto}, {
      &scc_info_ModelOptimizationPolicy_Graph_model_5fconfig_2eproto.base,
      &scc_info_ModelOptimizationPolicy_Cuda_model_5fconfig_2eproto.base,
      &scc_info_ModelOptimizationPolicy_ExecutionAccelerators_model_5fconfig_2eproto.base,
      &scc_info_ModelOptimizationPolicy_PinnedMemoryBuffer_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_Cuda_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy_Cuda();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_Cuda_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_model_5fconfig_2eproto}, {
      &scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_GraphSpec_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_Cuda_GraphSpec_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy_Cuda_GraphSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_GraphSpec_model_5fconfig_2eproto}, {
      &scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse_model_5fconfig_2eproto.base,
      &scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse_model_5fconfig_2eproto}, {
      &scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_Shape_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_model_5fconfig_2eproto}, {
      &scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse_model_5fconfig_2eproto}, {
      &scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_Shape_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_GraphSpec_Shape_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_Cuda_GraphSpec_Shape_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_Shape_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelOptimizationPolicy_Cuda_GraphSpec_Shape_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_ExecutionAccelerators_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_ExecutionAccelerators_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy_ExecutionAccelerators();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_ExecutionAccelerators_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelOptimizationPolicy_ExecutionAccelerators_model_5fconfig_2eproto}, {
      &scc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_model_5fconfig_2eproto}, {
      &scc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_Graph_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_Graph_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy_Graph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOptimizationPolicy_Graph_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelOptimizationPolicy_Graph_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelOptimizationPolicy_PinnedMemoryBuffer_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOptimizationPolicy_PinnedMemoryBuffer_default_instance_;
    new (ptr) ::inference::ModelOptimizationPolicy_PinnedMemoryBuffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOptimizationPolicy_PinnedMemoryBuffer_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelOptimizationPolicy_PinnedMemoryBuffer_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelOutput_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelOutput_default_instance_;
    new (ptr) ::inference::ModelOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelOutput_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelOutput_model_5fconfig_2eproto}, {
      &scc_info_ModelTensorReshape_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelParameter_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelParameter_default_instance_;
    new (ptr) ::inference::ModelParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelParameter_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelParameter_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelQueuePolicy_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelQueuePolicy_default_instance_;
    new (ptr) ::inference::ModelQueuePolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelQueuePolicy_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelQueuePolicy_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelRateLimiter_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelRateLimiter_default_instance_;
    new (ptr) ::inference::ModelRateLimiter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelRateLimiter_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelRateLimiter_model_5fconfig_2eproto}, {
      &scc_info_ModelRateLimiter_Resource_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelRateLimiter_Resource_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelRateLimiter_Resource_default_instance_;
    new (ptr) ::inference::ModelRateLimiter_Resource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelRateLimiter_Resource_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelRateLimiter_Resource_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelSequenceBatching_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelSequenceBatching_default_instance_;
    new (ptr) ::inference::ModelSequenceBatching();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModelSequenceBatching_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModelSequenceBatching_model_5fconfig_2eproto}, {
      &scc_info_ModelSequenceBatching_StrategyDirect_model_5fconfig_2eproto.base,
      &scc_info_ModelSequenceBatching_StrategyOldest_model_5fconfig_2eproto.base,
      &scc_info_ModelSequenceBatching_ControlInput_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelSequenceBatching_Control_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelSequenceBatching_Control_default_instance_;
    new (ptr) ::inference::ModelSequenceBatching_Control();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelSequenceBatching_Control_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelSequenceBatching_Control_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelSequenceBatching_ControlInput_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelSequenceBatching_ControlInput_default_instance_;
    new (ptr) ::inference::ModelSequenceBatching_ControlInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelSequenceBatching_ControlInput_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelSequenceBatching_ControlInput_model_5fconfig_2eproto}, {
      &scc_info_ModelSequenceBatching_Control_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelSequenceBatching_StrategyDirect_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelSequenceBatching_StrategyDirect_default_instance_;
    new (ptr) ::inference::ModelSequenceBatching_StrategyDirect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelSequenceBatching_StrategyDirect_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelSequenceBatching_StrategyDirect_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelSequenceBatching_StrategyOldest_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelSequenceBatching_StrategyOldest_default_instance_;
    new (ptr) ::inference::ModelSequenceBatching_StrategyOldest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelSequenceBatching_StrategyOldest_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelSequenceBatching_StrategyOldest_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelTensorReshape_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelTensorReshape_default_instance_;
    new (ptr) ::inference::ModelTensorReshape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelTensorReshape_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelTensorReshape_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelTransactionPolicy_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelTransactionPolicy_default_instance_;
    new (ptr) ::inference::ModelTransactionPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelTransactionPolicy_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelTransactionPolicy_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelVersionPolicy_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelVersionPolicy_default_instance_;
    new (ptr) ::inference::ModelVersionPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModelVersionPolicy_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModelVersionPolicy_model_5fconfig_2eproto}, {
      &scc_info_ModelVersionPolicy_Latest_model_5fconfig_2eproto.base,
      &scc_info_ModelVersionPolicy_All_model_5fconfig_2eproto.base,
      &scc_info_ModelVersionPolicy_Specific_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelVersionPolicy_All_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelVersionPolicy_All_default_instance_;
    new (ptr) ::inference::ModelVersionPolicy_All();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelVersionPolicy_All_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelVersionPolicy_All_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelVersionPolicy_Latest_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelVersionPolicy_Latest_default_instance_;
    new (ptr) ::inference::ModelVersionPolicy_Latest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelVersionPolicy_Latest_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelVersionPolicy_Latest_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelVersionPolicy_Specific_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelVersionPolicy_Specific_default_instance_;
    new (ptr) ::inference::ModelVersionPolicy_Specific();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelVersionPolicy_Specific_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelVersionPolicy_Specific_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelWarmup_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelWarmup_default_instance_;
    new (ptr) ::inference::ModelWarmup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelWarmup_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelWarmup_model_5fconfig_2eproto}, {
      &scc_info_ModelWarmup_InputsEntry_DoNotUse_model_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelWarmup_Input_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelWarmup_Input_default_instance_;
    new (ptr) ::inference::ModelWarmup_Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelWarmup_Input_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelWarmup_Input_model_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelWarmup_InputsEntry_DoNotUse_model_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::inference::_ModelWarmup_InputsEntry_DoNotUse_default_instance_;
    new (ptr) ::inference::ModelWarmup_InputsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelWarmup_InputsEntry_DoNotUse_model_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelWarmup_InputsEntry_DoNotUse_model_5fconfig_2eproto}, {
      &scc_info_ModelWarmup_Input_model_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_model_5fconfig_2eproto[46];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_model_5fconfig_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_model_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_model_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelRateLimiter_Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelRateLimiter_Resource, name_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelRateLimiter_Resource, global_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelRateLimiter_Resource, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelRateLimiter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelRateLimiter, resources_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelRateLimiter, priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelInstanceGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelInstanceGroup, name_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelInstanceGroup, kind_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelInstanceGroup, count_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelInstanceGroup, rate_limiter_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelInstanceGroup, gpus_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelInstanceGroup, profile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelTensorReshape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelTensorReshape, shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelInput, name_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelInput, data_type_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelInput, format_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelInput, dims_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelInput, reshape_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelInput, is_shape_tensor_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelInput, allow_ragged_batch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOutput, name_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOutput, data_type_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOutput, dims_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOutput, reshape_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOutput, label_filename_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOutput, is_shape_tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::BatchInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::BatchInput, kind_),
  PROTOBUF_FIELD_OFFSET(::inference::BatchInput, target_name_),
  PROTOBUF_FIELD_OFFSET(::inference::BatchInput, data_type_),
  PROTOBUF_FIELD_OFFSET(::inference::BatchInput, source_input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::BatchOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::BatchOutput, target_name_),
  PROTOBUF_FIELD_OFFSET(::inference::BatchOutput, kind_),
  PROTOBUF_FIELD_OFFSET(::inference::BatchOutput, source_input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelVersionPolicy_Latest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelVersionPolicy_Latest, num_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelVersionPolicy_All, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelVersionPolicy_Specific, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelVersionPolicy_Specific, versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelVersionPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inference::ModelVersionPolicy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inference::ModelVersionPolicy, policy_choice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Graph, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape, dim_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound, batch_size_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound, input_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec, batch_size_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec, input_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda_GraphSpec, graph_lower_bound_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda, graphs_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda, busy_wait_events_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_Cuda, graph_spec_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator, name_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_ExecutionAccelerators, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_ExecutionAccelerators, gpu_execution_accelerator_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_ExecutionAccelerators, cpu_execution_accelerator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_PinnedMemoryBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy_PinnedMemoryBuffer, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy, graph_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy, priority_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy, cuda_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy, execution_accelerators_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy, input_pinned_memory_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelOptimizationPolicy, output_pinned_memory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelQueuePolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelQueuePolicy, timeout_action_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelQueuePolicy, default_timeout_microseconds_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelQueuePolicy, allow_timeout_override_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelQueuePolicy, max_queue_size_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching, preferred_batch_size_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching, max_queue_delay_microseconds_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching, preserve_ordering_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching, priority_levels_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching, default_priority_level_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching, default_queue_policy_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelDynamicBatching, priority_queue_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_Control, kind_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_Control, int32_false_true_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_Control, fp32_false_true_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_Control, data_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_ControlInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_ControlInput, name_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_ControlInput, control_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_StrategyDirect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_StrategyDirect, max_queue_delay_microseconds_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_StrategyDirect, minimum_slot_utilization_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_StrategyOldest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_StrategyOldest, max_candidate_sequences_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_StrategyOldest, preferred_batch_size_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching_StrategyOldest, max_queue_delay_microseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching, max_sequence_idle_microseconds_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching, control_input_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelSequenceBatching, strategy_choice_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step_InputMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step_InputMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step_InputMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step_InputMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step_OutputMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step_OutputMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step_OutputMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step_OutputMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step, model_name_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step, model_version_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step, input_map_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling_Step, output_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelEnsembling, step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelParameter, string_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup_Input, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup_Input, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup_Input, data_type_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup_Input, dims_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup_Input, input_data_type_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup_InputsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup_InputsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup_InputsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup_InputsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup, name_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup, batch_size_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelWarmup, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOperations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelOperations, op_library_filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelTransactionPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelTransactionPolicy, decoupled_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_CcModelFilenamesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_CcModelFilenamesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_CcModelFilenamesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_CcModelFilenamesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_MetricTagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_MetricTagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_MetricTagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_MetricTagsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, name_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, platform_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, backend_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, version_policy_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, max_batch_size_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, input_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, output_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, batch_input_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, batch_output_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, optimization_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, instance_group_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, default_model_filename_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, cc_model_filenames_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, metric_tags_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, parameters_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, model_warmup_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, model_operations_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, model_transaction_policy_),
  PROTOBUF_FIELD_OFFSET(::inference::ModelConfig, scheduling_choice_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::inference::ModelRateLimiter_Resource)},
  { 8, -1, sizeof(::inference::ModelRateLimiter)},
  { 15, -1, sizeof(::inference::ModelInstanceGroup)},
  { 26, -1, sizeof(::inference::ModelTensorReshape)},
  { 32, -1, sizeof(::inference::ModelInput)},
  { 44, -1, sizeof(::inference::ModelOutput)},
  { 55, -1, sizeof(::inference::BatchInput)},
  { 64, -1, sizeof(::inference::BatchOutput)},
  { 72, -1, sizeof(::inference::ModelVersionPolicy_Latest)},
  { 78, -1, sizeof(::inference::ModelVersionPolicy_All)},
  { 83, -1, sizeof(::inference::ModelVersionPolicy_Specific)},
  { 89, -1, sizeof(::inference::ModelVersionPolicy)},
  { 98, -1, sizeof(::inference::ModelOptimizationPolicy_Graph)},
  { 104, -1, sizeof(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape)},
  { 110, 117, sizeof(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse)},
  { 119, -1, sizeof(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound)},
  { 126, 133, sizeof(::inference::ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse)},
  { 135, -1, sizeof(::inference::ModelOptimizationPolicy_Cuda_GraphSpec)},
  { 143, -1, sizeof(::inference::ModelOptimizationPolicy_Cuda)},
  { 151, 158, sizeof(::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse)},
  { 160, -1, sizeof(::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator)},
  { 167, -1, sizeof(::inference::ModelOptimizationPolicy_ExecutionAccelerators)},
  { 174, -1, sizeof(::inference::ModelOptimizationPolicy_PinnedMemoryBuffer)},
  { 180, -1, sizeof(::inference::ModelOptimizationPolicy)},
  { 191, -1, sizeof(::inference::ModelQueuePolicy)},
  { 200, 207, sizeof(::inference::ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse)},
  { 209, -1, sizeof(::inference::ModelDynamicBatching)},
  { 221, -1, sizeof(::inference::ModelSequenceBatching_Control)},
  { 230, -1, sizeof(::inference::ModelSequenceBatching_ControlInput)},
  { 237, -1, sizeof(::inference::ModelSequenceBatching_StrategyDirect)},
  { 244, -1, sizeof(::inference::ModelSequenceBatching_StrategyOldest)},
  { 252, -1, sizeof(::inference::ModelSequenceBatching)},
  { 262, 269, sizeof(::inference::ModelEnsembling_Step_InputMapEntry_DoNotUse)},
  { 271, 278, sizeof(::inference::ModelEnsembling_Step_OutputMapEntry_DoNotUse)},
  { 280, -1, sizeof(::inference::ModelEnsembling_Step)},
  { 289, -1, sizeof(::inference::ModelEnsembling)},
  { 295, -1, sizeof(::inference::ModelParameter)},
  { 301, -1, sizeof(::inference::ModelWarmup_Input)},
  { 312, 319, sizeof(::inference::ModelWarmup_InputsEntry_DoNotUse)},
  { 321, -1, sizeof(::inference::ModelWarmup)},
  { 329, -1, sizeof(::inference::ModelOperations)},
  { 335, -1, sizeof(::inference::ModelTransactionPolicy)},
  { 341, 348, sizeof(::inference::ModelConfig_CcModelFilenamesEntry_DoNotUse)},
  { 350, 357, sizeof(::inference::ModelConfig_MetricTagsEntry_DoNotUse)},
  { 359, 366, sizeof(::inference::ModelConfig_ParametersEntry_DoNotUse)},
  { 368, -1, sizeof(::inference::ModelConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelRateLimiter_Resource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelRateLimiter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelInstanceGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelTensorReshape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_BatchInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_BatchOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelVersionPolicy_Latest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelVersionPolicy_All_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelVersionPolicy_Specific_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelVersionPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_Graph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_Cuda_GraphSpec_Shape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_Cuda_GraphSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_Cuda_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_ExecutionAccelerators_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_PinnedMemoryBuffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOptimizationPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelQueuePolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelDynamicBatching_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelSequenceBatching_Control_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelSequenceBatching_ControlInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelSequenceBatching_StrategyDirect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelSequenceBatching_StrategyOldest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelSequenceBatching_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelEnsembling_Step_InputMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelEnsembling_Step_OutputMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelEnsembling_Step_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelEnsembling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelWarmup_Input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelWarmup_InputsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelWarmup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelOperations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelTransactionPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelConfig_CcModelFilenamesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelConfig_MetricTagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelConfig_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::inference::_ModelConfig_default_instance_),
};

const char descriptor_table_protodef_model_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022model_config.proto\022\tinference\"\226\001\n\020Mode"
  "lRateLimiter\0227\n\tresources\030\001 \003(\0132$.infere"
  "nce.ModelRateLimiter.Resource\022\020\n\010priorit"
  "y\030\002 \001(\r\0327\n\010Resource\022\014\n\004name\030\001 \001(\t\022\016\n\006glo"
  "bal\030\002 \001(\010\022\r\n\005count\030\003 \001(\r\"\370\001\n\022ModelInstan"
  "ceGroup\022\014\n\004name\030\001 \001(\t\0220\n\004kind\030\004 \001(\0162\".in"
  "ference.ModelInstanceGroup.Kind\022\r\n\005count"
  "\030\002 \001(\005\0221\n\014rate_limiter\030\006 \001(\0132\033.inference"
  ".ModelRateLimiter\022\014\n\004gpus\030\003 \003(\005\022\017\n\007profi"
  "le\030\005 \003(\t\"A\n\004Kind\022\r\n\tKIND_AUTO\020\000\022\014\n\010KIND_"
  "GPU\020\001\022\014\n\010KIND_CPU\020\002\022\016\n\nKIND_MODEL\020\003\"#\n\022M"
  "odelTensorReshape\022\r\n\005shape\030\001 \003(\003\"\240\002\n\nMod"
  "elInput\022\014\n\004name\030\001 \001(\t\022&\n\tdata_type\030\002 \001(\016"
  "2\023.inference.DataType\022,\n\006format\030\003 \001(\0162\034."
  "inference.ModelInput.Format\022\014\n\004dims\030\004 \003("
  "\003\022.\n\007reshape\030\005 \001(\0132\035.inference.ModelTens"
  "orReshape\022\027\n\017is_shape_tensor\030\006 \001(\010\022\032\n\022al"
  "low_ragged_batch\030\007 \001(\010\";\n\006Format\022\017\n\013FORM"
  "AT_NONE\020\000\022\017\n\013FORMAT_NHWC\020\001\022\017\n\013FORMAT_NCH"
  "W\020\002\"\262\001\n\013ModelOutput\022\014\n\004name\030\001 \001(\t\022&\n\tdat"
  "a_type\030\002 \001(\0162\023.inference.DataType\022\014\n\004dim"
  "s\030\003 \003(\003\022.\n\007reshape\030\005 \001(\0132\035.inference.Mod"
  "elTensorReshape\022\026\n\016label_filename\030\004 \001(\t\022"
  "\027\n\017is_shape_tensor\030\006 \001(\010\"\245\002\n\nBatchInput\022"
  "(\n\004kind\030\001 \001(\0162\032.inference.BatchInput.Kin"
  "d\022\023\n\013target_name\030\002 \003(\t\022&\n\tdata_type\030\003 \001("
  "\0162\023.inference.DataType\022\024\n\014source_input\030\004"
  " \003(\t\"\231\001\n\004Kind\022\027\n\023BATCH_ELEMENT_COUNT\020\000\022#"
  "\n\037BATCH_ACCUMULATED_ELEMENT_COUNT\020\001\022-\n)B"
  "ATCH_ACCUMULATED_ELEMENT_COUNT_WITH_ZERO"
  "\020\002\022$\n BATCH_MAX_ELEMENT_COUNT_AS_SHAPE\020\003"
  "\"\217\001\n\013BatchOutput\022\023\n\013target_name\030\001 \003(\t\022)\n"
  "\004kind\030\002 \001(\0162\033.inference.BatchOutput.Kind"
  "\022\024\n\014source_input\030\003 \003(\t\"*\n\004Kind\022\"\n\036BATCH_"
  "SCATTER_WITH_INPUT_SHAPE\020\000\"\220\002\n\022ModelVers"
  "ionPolicy\0226\n\006latest\030\001 \001(\0132$.inference.Mo"
  "delVersionPolicy.LatestH\000\0220\n\003all\030\002 \001(\0132!"
  ".inference.ModelVersionPolicy.AllH\000\022:\n\010s"
  "pecific\030\003 \001(\0132&.inference.ModelVersionPo"
  "licy.SpecificH\000\032\036\n\006Latest\022\024\n\014num_version"
  "s\030\001 \001(\r\032\005\n\003All\032\034\n\010Specific\022\020\n\010versions\030\001"
  " \003(\003B\017\n\rpolicy_choice\"\241\r\n\027ModelOptimizat"
  "ionPolicy\0227\n\005graph\030\001 \001(\0132(.inference.Mod"
  "elOptimizationPolicy.Graph\022B\n\010priority\030\002"
  " \001(\01620.inference.ModelOptimizationPolicy"
  ".ModelPriority\0225\n\004cuda\030\003 \001(\0132\'.inference"
  ".ModelOptimizationPolicy.Cuda\022X\n\026executi"
  "on_accelerators\030\004 \001(\01328.inference.ModelO"
  "ptimizationPolicy.ExecutionAccelerators\022"
  "R\n\023input_pinned_memory\030\005 \001(\01325.inference"
  ".ModelOptimizationPolicy.PinnedMemoryBuf"
  "fer\022S\n\024output_pinned_memory\030\006 \001(\01325.infe"
  "rence.ModelOptimizationPolicy.PinnedMemo"
  "ryBuffer\032\026\n\005Graph\022\r\n\005level\030\001 \001(\005\032\236\005\n\004Cud"
  "a\022\016\n\006graphs\030\001 \001(\010\022\030\n\020busy_wait_events\030\002 "
  "\001(\010\022E\n\ngraph_spec\030\003 \003(\01321.inference.Mode"
  "lOptimizationPolicy.Cuda.GraphSpec\032\244\004\n\tG"
  "raphSpec\022\022\n\nbatch_size\030\001 \001(\005\022K\n\005input\030\002 "
  "\003(\0132<.inference.ModelOptimizationPolicy."
  "Cuda.GraphSpec.InputEntry\022W\n\021graph_lower"
  "_bound\030\003 \001(\0132<.inference.ModelOptimizati"
  "onPolicy.Cuda.GraphSpec.LowerBound\032\024\n\005Sh"
  "ape\022\013\n\003dim\030\001 \003(\003\032\337\001\n\nLowerBound\022\022\n\nbatch"
  "_size\030\001 \001(\005\022V\n\005input\030\002 \003(\0132G.inference.M"
  "odelOptimizationPolicy.Cuda.GraphSpec.Lo"
  "werBound.InputEntry\032e\n\nInputEntry\022\013\n\003key"
  "\030\001 \001(\t\022F\n\005value\030\002 \001(\01327.inference.ModelO"
  "ptimizationPolicy.Cuda.GraphSpec.Shape:\002"
  "8\001\032e\n\nInputEntry\022\013\n\003key\030\001 \001(\t\022F\n\005value\030\002"
  " \001(\01327.inference.ModelOptimizationPolicy"
  ".Cuda.GraphSpec.Shape:\0028\001\032\244\003\n\025ExecutionA"
  "ccelerators\022g\n\031gpu_execution_accelerator"
  "\030\001 \003(\0132D.inference.ModelOptimizationPoli"
  "cy.ExecutionAccelerators.Accelerator\022g\n\031"
  "cpu_execution_accelerator\030\002 \003(\0132D.infere"
  "nce.ModelOptimizationPolicy.ExecutionAcc"
  "elerators.Accelerator\032\270\001\n\013Accelerator\022\014\n"
  "\004name\030\001 \001(\t\022h\n\nparameters\030\002 \003(\0132T.infere"
  "nce.ModelOptimizationPolicy.ExecutionAcc"
  "elerators.Accelerator.ParametersEntry\0321\n"
  "\017ParametersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t:\0028\001\032$\n\022PinnedMemoryBuffer\022\016\n\006enable"
  "\030\001 \001(\010\"I\n\rModelPriority\022\024\n\020PRIORITY_DEFA"
  "ULT\020\000\022\020\n\014PRIORITY_MAX\020\001\022\020\n\014PRIORITY_MIN\020"
  "\002\"\333\001\n\020ModelQueuePolicy\022A\n\016timeout_action"
  "\030\001 \001(\0162).inference.ModelQueuePolicy.Time"
  "outAction\022$\n\034default_timeout_microsecond"
  "s\030\002 \001(\004\022\036\n\026allow_timeout_override\030\003 \001(\010\022"
  "\026\n\016max_queue_size\030\004 \001(\r\"&\n\rTimeoutAction"
  "\022\n\n\006REJECT\020\000\022\t\n\005DELAY\020\001\"\233\003\n\024ModelDynamic"
  "Batching\022\034\n\024preferred_batch_size\030\001 \003(\005\022$"
  "\n\034max_queue_delay_microseconds\030\002 \001(\004\022\031\n\021"
  "preserve_ordering\030\003 \001(\010\022\027\n\017priority_leve"
  "ls\030\004 \001(\r\022\036\n\026default_priority_level\030\005 \001(\r"
  "\0229\n\024default_queue_policy\030\006 \001(\0132\033.inferen"
  "ce.ModelQueuePolicy\022W\n\025priority_queue_po"
  "licy\030\007 \003(\01328.inference.ModelDynamicBatch"
  "ing.PriorityQueuePolicyEntry\032W\n\030Priority"
  "QueuePolicyEntry\022\013\n\003key\030\001 \001(\r\022*\n\005value\030\002"
  " \001(\0132\033.inference.ModelQueuePolicy:\0028\001\"\343\006"
  "\n\025ModelSequenceBatching\022A\n\006direct\030\003 \001(\0132"
  "/.inference.ModelSequenceBatching.Strate"
  "gyDirectH\000\022A\n\006oldest\030\004 \001(\0132/.inference.M"
  "odelSequenceBatching.StrategyOldestH\000\022&\n"
  "\036max_sequence_idle_microseconds\030\001 \001(\004\022D\n"
  "\rcontrol_input\030\002 \003(\0132-.inference.ModelSe"
  "quenceBatching.ControlInput\032\230\002\n\007Control\022"
  ";\n\004kind\030\001 \001(\0162-.inference.ModelSequenceB"
  "atching.Control.Kind\022\030\n\020int32_false_true"
  "\030\002 \003(\005\022\027\n\017fp32_false_true\030\003 \003(\002\022&\n\tdata_"
  "type\030\004 \001(\0162\023.inference.DataType\"u\n\004Kind\022"
  "\032\n\026CONTROL_SEQUENCE_START\020\000\022\032\n\026CONTROL_S"
  "EQUENCE_READY\020\001\022\030\n\024CONTROL_SEQUENCE_END\020"
  "\002\022\033\n\027CONTROL_SEQUENCE_CORRID\020\003\032W\n\014Contro"
  "lInput\022\014\n\004name\030\001 \001(\t\0229\n\007control\030\002 \003(\0132(."
  "inference.ModelSequenceBatching.Control\032"
  "X\n\016StrategyDirect\022$\n\034max_queue_delay_mic"
  "roseconds\030\001 \001(\004\022 \n\030minimum_slot_utilizat"
  "ion\030\002 \001(\002\032u\n\016StrategyOldest\022\037\n\027max_candi"
  "date_sequences\030\001 \001(\005\022\034\n\024preferred_batch_"
  "size\030\002 \003(\005\022$\n\034max_queue_delay_microsecon"
  "ds\030\003 \001(\004B\021\n\017strategy_choice\"\335\002\n\017ModelEns"
  "embling\022-\n\004step\030\001 \003(\0132\037.inference.ModelE"
  "nsembling.Step\032\232\002\n\004Step\022\022\n\nmodel_name\030\001 "
  "\001(\t\022\025\n\rmodel_version\030\002 \001(\003\022@\n\tinput_map\030"
  "\003 \003(\0132-.inference.ModelEnsembling.Step.I"
  "nputMapEntry\022B\n\noutput_map\030\004 \003(\0132..infer"
  "ence.ModelEnsembling.Step.OutputMapEntry"
  "\032/\n\rInputMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\0320\n\016OutputMapEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\"&\n\016ModelParameter\022\024\n"
  "\014string_value\030\001 \001(\t\"\312\002\n\013ModelWarmup\022\014\n\004n"
  "ame\030\001 \001(\t\022\022\n\nbatch_size\030\002 \001(\r\0222\n\006inputs\030"
  "\003 \003(\0132\".inference.ModelWarmup.InputsEntr"
  "y\032\227\001\n\005Input\022&\n\tdata_type\030\001 \001(\0162\023.inferen"
  "ce.DataType\022\014\n\004dims\030\002 \003(\003\022\023\n\tzero_data\030\003"
  " \001(\010H\000\022\025\n\013random_data\030\004 \001(\010H\000\022\031\n\017input_d"
  "ata_file\030\005 \001(\tH\000B\021\n\017input_data_type\032K\n\013I"
  "nputsEntry\022\013\n\003key\030\001 \001(\t\022+\n\005value\030\002 \001(\0132\034"
  ".inference.ModelWarmup.Input:\0028\001\".\n\017Mode"
  "lOperations\022\033\n\023op_library_filename\030\001 \003(\t"
  "\"+\n\026ModelTransactionPolicy\022\021\n\tdecoupled\030"
  "\001 \001(\010\"\270\t\n\013ModelConfig\022\014\n\004name\030\001 \001(\t\022\020\n\010p"
  "latform\030\002 \001(\t\022\017\n\007backend\030\021 \001(\t\0225\n\016versio"
  "n_policy\030\003 \001(\0132\035.inference.ModelVersionP"
  "olicy\022\026\n\016max_batch_size\030\004 \001(\005\022$\n\005input\030\005"
  " \003(\0132\025.inference.ModelInput\022&\n\006output\030\006 "
  "\003(\0132\026.inference.ModelOutput\022*\n\013batch_inp"
  "ut\030\024 \003(\0132\025.inference.BatchInput\022,\n\014batch"
  "_output\030\025 \003(\0132\026.inference.BatchOutput\0228\n"
  "\014optimization\030\014 \001(\0132\".inference.ModelOpt"
  "imizationPolicy\022;\n\020dynamic_batching\030\013 \001("
  "\0132\037.inference.ModelDynamicBatchingH\000\022=\n\021"
  "sequence_batching\030\r \001(\0132 .inference.Mode"
  "lSequenceBatchingH\000\0229\n\023ensemble_scheduli"
  "ng\030\017 \001(\0132\032.inference.ModelEnsemblingH\000\0225"
  "\n\016instance_group\030\007 \003(\0132\035.inference.Model"
  "InstanceGroup\022\036\n\026default_model_filename\030"
  "\010 \001(\t\022H\n\022cc_model_filenames\030\t \003(\0132,.infe"
  "rence.ModelConfig.CcModelFilenamesEntry\022"
  ";\n\013metric_tags\030\n \003(\0132&.inference.ModelCo"
  "nfig.MetricTagsEntry\022:\n\nparameters\030\016 \003(\013"
  "2&.inference.ModelConfig.ParametersEntry"
  "\022,\n\014model_warmup\030\020 \003(\0132\026.inference.Model"
  "Warmup\0224\n\020model_operations\030\022 \001(\0132\032.infer"
  "ence.ModelOperations\022C\n\030model_transactio"
  "n_policy\030\023 \001(\0132!.inference.ModelTransact"
  "ionPolicy\0327\n\025CcModelFilenamesEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0321\n\017MetricTags"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032L\n"
  "\017ParametersEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030\002"
  " \001(\0132\031.inference.ModelParameter:\0028\001B\023\n\021s"
  "cheduling_choice*\353\001\n\010DataType\022\020\n\014TYPE_IN"
  "VALID\020\000\022\r\n\tTYPE_BOOL\020\001\022\016\n\nTYPE_UINT8\020\002\022\017"
  "\n\013TYPE_UINT16\020\003\022\017\n\013TYPE_UINT32\020\004\022\017\n\013TYPE"
  "_UINT64\020\005\022\r\n\tTYPE_INT8\020\006\022\016\n\nTYPE_INT16\020\007"
  "\022\016\n\nTYPE_INT32\020\010\022\016\n\nTYPE_INT64\020\t\022\r\n\tTYPE"
  "_FP16\020\n\022\r\n\tTYPE_FP32\020\013\022\r\n\tTYPE_FP64\020\014\022\017\n"
  "\013TYPE_STRING\020\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_model_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_model_5fconfig_2eproto_sccs[46] = {
  &scc_info_BatchInput_model_5fconfig_2eproto.base,
  &scc_info_BatchOutput_model_5fconfig_2eproto.base,
  &scc_info_ModelConfig_model_5fconfig_2eproto.base,
  &scc_info_ModelConfig_CcModelFilenamesEntry_DoNotUse_model_5fconfig_2eproto.base,
  &scc_info_ModelConfig_MetricTagsEntry_DoNotUse_model_5fconfig_2eproto.base,
  &scc_info_ModelConfig_ParametersEntry_DoNotUse_model_5fconfig_2eproto.base,
  &scc_info_ModelDynamicBatching_model_5fconfig_2eproto.base,
  &scc_info_ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse_model_5fconfig_2eproto.base,
  &scc_info_ModelEnsembling_model_5fconfig_2eproto.base,
  &scc_info_ModelEnsembling_Step_model_5fconfig_2eproto.base,
  &scc_info_ModelEnsembling_Step_InputMapEntry_DoNotUse_model_5fconfig_2eproto.base,
  &scc_info_ModelEnsembling_Step_OutputMapEntry_DoNotUse_model_5fconfig_2eproto.base,
  &scc_info_ModelInput_model_5fconfig_2eproto.base,
  &scc_info_ModelInstanceGroup_model_5fconfig_2eproto.base,
  &scc_info_ModelOperations_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_Cuda_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_Shape_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_ExecutionAccelerators_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_Graph_model_5fconfig_2eproto.base,
  &scc_info_ModelOptimizationPolicy_PinnedMemoryBuffer_model_5fconfig_2eproto.base,
  &scc_info_ModelOutput_model_5fconfig_2eproto.base,
  &scc_info_ModelParameter_model_5fconfig_2eproto.base,
  &scc_info_ModelQueuePolicy_model_5fconfig_2eproto.base,
  &scc_info_ModelRateLimiter_model_5fconfig_2eproto.base,
  &scc_info_ModelRateLimiter_Resource_model_5fconfig_2eproto.base,
  &scc_info_ModelSequenceBatching_model_5fconfig_2eproto.base,
  &scc_info_ModelSequenceBatching_Control_model_5fconfig_2eproto.base,
  &scc_info_ModelSequenceBatching_ControlInput_model_5fconfig_2eproto.base,
  &scc_info_ModelSequenceBatching_StrategyDirect_model_5fconfig_2eproto.base,
  &scc_info_ModelSequenceBatching_StrategyOldest_model_5fconfig_2eproto.base,
  &scc_info_ModelTensorReshape_model_5fconfig_2eproto.base,
  &scc_info_ModelTransactionPolicy_model_5fconfig_2eproto.base,
  &scc_info_ModelVersionPolicy_model_5fconfig_2eproto.base,
  &scc_info_ModelVersionPolicy_All_model_5fconfig_2eproto.base,
  &scc_info_ModelVersionPolicy_Latest_model_5fconfig_2eproto.base,
  &scc_info_ModelVersionPolicy_Specific_model_5fconfig_2eproto.base,
  &scc_info_ModelWarmup_model_5fconfig_2eproto.base,
  &scc_info_ModelWarmup_Input_model_5fconfig_2eproto.base,
  &scc_info_ModelWarmup_InputsEntry_DoNotUse_model_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_model_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_model_5fconfig_2eproto, "model_config.proto", 7142,
  &descriptor_table_model_5fconfig_2eproto_once, descriptor_table_model_5fconfig_2eproto_sccs, descriptor_table_model_5fconfig_2eproto_deps, 46, 0,
  schemas, file_default_instances, TableStruct_model_5fconfig_2eproto::offsets,
  file_level_metadata_model_5fconfig_2eproto, 46, file_level_enum_descriptors_model_5fconfig_2eproto, file_level_service_descriptors_model_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_model_5fconfig_2eproto(&descriptor_table_model_5fconfig_2eproto);
namespace inference {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelInstanceGroup_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_5fconfig_2eproto);
  return file_level_enum_descriptors_model_5fconfig_2eproto[0];
}
bool ModelInstanceGroup_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModelInstanceGroup_Kind ModelInstanceGroup::KIND_AUTO;
constexpr ModelInstanceGroup_Kind ModelInstanceGroup::KIND_GPU;
constexpr ModelInstanceGroup_Kind ModelInstanceGroup::KIND_CPU;
constexpr ModelInstanceGroup_Kind ModelInstanceGroup::KIND_MODEL;
constexpr ModelInstanceGroup_Kind ModelInstanceGroup::Kind_MIN;
constexpr ModelInstanceGroup_Kind ModelInstanceGroup::Kind_MAX;
constexpr int ModelInstanceGroup::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelInput_Format_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_5fconfig_2eproto);
  return file_level_enum_descriptors_model_5fconfig_2eproto[1];
}
bool ModelInput_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModelInput_Format ModelInput::FORMAT_NONE;
constexpr ModelInput_Format ModelInput::FORMAT_NHWC;
constexpr ModelInput_Format ModelInput::FORMAT_NCHW;
constexpr ModelInput_Format ModelInput::Format_MIN;
constexpr ModelInput_Format ModelInput::Format_MAX;
constexpr int ModelInput::Format_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatchInput_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_5fconfig_2eproto);
  return file_level_enum_descriptors_model_5fconfig_2eproto[2];
}
bool BatchInput_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatchInput_Kind BatchInput::BATCH_ELEMENT_COUNT;
constexpr BatchInput_Kind BatchInput::BATCH_ACCUMULATED_ELEMENT_COUNT;
constexpr BatchInput_Kind BatchInput::BATCH_ACCUMULATED_ELEMENT_COUNT_WITH_ZERO;
constexpr BatchInput_Kind BatchInput::BATCH_MAX_ELEMENT_COUNT_AS_SHAPE;
constexpr BatchInput_Kind BatchInput::Kind_MIN;
constexpr BatchInput_Kind BatchInput::Kind_MAX;
constexpr int BatchInput::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatchOutput_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_5fconfig_2eproto);
  return file_level_enum_descriptors_model_5fconfig_2eproto[3];
}
bool BatchOutput_Kind_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatchOutput_Kind BatchOutput::BATCH_SCATTER_WITH_INPUT_SHAPE;
constexpr BatchOutput_Kind BatchOutput::Kind_MIN;
constexpr BatchOutput_Kind BatchOutput::Kind_MAX;
constexpr int BatchOutput::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelOptimizationPolicy_ModelPriority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_5fconfig_2eproto);
  return file_level_enum_descriptors_model_5fconfig_2eproto[4];
}
bool ModelOptimizationPolicy_ModelPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModelOptimizationPolicy_ModelPriority ModelOptimizationPolicy::PRIORITY_DEFAULT;
constexpr ModelOptimizationPolicy_ModelPriority ModelOptimizationPolicy::PRIORITY_MAX;
constexpr ModelOptimizationPolicy_ModelPriority ModelOptimizationPolicy::PRIORITY_MIN;
constexpr ModelOptimizationPolicy_ModelPriority ModelOptimizationPolicy::ModelPriority_MIN;
constexpr ModelOptimizationPolicy_ModelPriority ModelOptimizationPolicy::ModelPriority_MAX;
constexpr int ModelOptimizationPolicy::ModelPriority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelQueuePolicy_TimeoutAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_5fconfig_2eproto);
  return file_level_enum_descriptors_model_5fconfig_2eproto[5];
}
bool ModelQueuePolicy_TimeoutAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModelQueuePolicy_TimeoutAction ModelQueuePolicy::REJECT;
constexpr ModelQueuePolicy_TimeoutAction ModelQueuePolicy::DELAY;
constexpr ModelQueuePolicy_TimeoutAction ModelQueuePolicy::TimeoutAction_MIN;
constexpr ModelQueuePolicy_TimeoutAction ModelQueuePolicy::TimeoutAction_MAX;
constexpr int ModelQueuePolicy::TimeoutAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelSequenceBatching_Control_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_5fconfig_2eproto);
  return file_level_enum_descriptors_model_5fconfig_2eproto[6];
}
bool ModelSequenceBatching_Control_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModelSequenceBatching_Control_Kind ModelSequenceBatching_Control::CONTROL_SEQUENCE_START;
constexpr ModelSequenceBatching_Control_Kind ModelSequenceBatching_Control::CONTROL_SEQUENCE_READY;
constexpr ModelSequenceBatching_Control_Kind ModelSequenceBatching_Control::CONTROL_SEQUENCE_END;
constexpr ModelSequenceBatching_Control_Kind ModelSequenceBatching_Control::CONTROL_SEQUENCE_CORRID;
constexpr ModelSequenceBatching_Control_Kind ModelSequenceBatching_Control::Kind_MIN;
constexpr ModelSequenceBatching_Control_Kind ModelSequenceBatching_Control::Kind_MAX;
constexpr int ModelSequenceBatching_Control::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_5fconfig_2eproto);
  return file_level_enum_descriptors_model_5fconfig_2eproto[7];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ModelRateLimiter_Resource::_Internal {
 public:
};

ModelRateLimiter_Resource::ModelRateLimiter_Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelRateLimiter.Resource)
}
ModelRateLimiter_Resource::ModelRateLimiter_Resource(const ModelRateLimiter_Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&global_, &from.global_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&global_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:inference.ModelRateLimiter.Resource)
}

void ModelRateLimiter_Resource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelRateLimiter_Resource_model_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&global_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&global_)) + sizeof(count_));
}

ModelRateLimiter_Resource::~ModelRateLimiter_Resource() {
  // @@protoc_insertion_point(destructor:inference.ModelRateLimiter.Resource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelRateLimiter_Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelRateLimiter_Resource::ArenaDtor(void* object) {
  ModelRateLimiter_Resource* _this = reinterpret_cast< ModelRateLimiter_Resource* >(object);
  (void)_this;
}
void ModelRateLimiter_Resource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelRateLimiter_Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelRateLimiter_Resource& ModelRateLimiter_Resource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelRateLimiter_Resource_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelRateLimiter_Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelRateLimiter.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&global_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&global_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRateLimiter_Resource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelRateLimiter.Resource.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool global = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          global_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelRateLimiter_Resource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelRateLimiter.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelRateLimiter.Resource.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool global = 2;
  if (this->global() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_global(), target);
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelRateLimiter.Resource)
  return target;
}

size_t ModelRateLimiter_Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelRateLimiter.Resource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool global = 2;
  if (this->global() != 0) {
    total_size += 1 + 1;
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelRateLimiter_Resource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelRateLimiter.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelRateLimiter_Resource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelRateLimiter_Resource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelRateLimiter.Resource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelRateLimiter.Resource)
    MergeFrom(*source);
  }
}

void ModelRateLimiter_Resource::MergeFrom(const ModelRateLimiter_Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelRateLimiter.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.global() != 0) {
    _internal_set_global(from._internal_global());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ModelRateLimiter_Resource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelRateLimiter.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelRateLimiter_Resource::CopyFrom(const ModelRateLimiter_Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelRateLimiter.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRateLimiter_Resource::IsInitialized() const {
  return true;
}

void ModelRateLimiter_Resource::InternalSwap(ModelRateLimiter_Resource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelRateLimiter_Resource, count_)
      + sizeof(ModelRateLimiter_Resource::count_)
      - PROTOBUF_FIELD_OFFSET(ModelRateLimiter_Resource, global_)>(
          reinterpret_cast<char*>(&global_),
          reinterpret_cast<char*>(&other->global_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRateLimiter_Resource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelRateLimiter::_Internal {
 public:
};

ModelRateLimiter::ModelRateLimiter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resources_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelRateLimiter)
}
ModelRateLimiter::ModelRateLimiter(const ModelRateLimiter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resources_(from.resources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:inference.ModelRateLimiter)
}

void ModelRateLimiter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelRateLimiter_model_5fconfig_2eproto.base);
  priority_ = 0u;
}

ModelRateLimiter::~ModelRateLimiter() {
  // @@protoc_insertion_point(destructor:inference.ModelRateLimiter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelRateLimiter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelRateLimiter::ArenaDtor(void* object) {
  ModelRateLimiter* _this = reinterpret_cast< ModelRateLimiter* >(object);
  (void)_this;
}
void ModelRateLimiter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelRateLimiter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelRateLimiter& ModelRateLimiter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelRateLimiter_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelRateLimiter::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelRateLimiter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_.Clear();
  priority_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelRateLimiter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .inference.ModelRateLimiter.Resource resources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelRateLimiter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelRateLimiter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .inference.ModelRateLimiter.Resource resources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_resources(i), target, stream);
  }

  // uint32 priority = 2;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelRateLimiter)
  return target;
}

size_t ModelRateLimiter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelRateLimiter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inference.ModelRateLimiter.Resource resources = 1;
  total_size += 1UL * this->_internal_resources_size();
  for (const auto& msg : this->resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 priority = 2;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelRateLimiter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelRateLimiter)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelRateLimiter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelRateLimiter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelRateLimiter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelRateLimiter)
    MergeFrom(*source);
  }
}

void ModelRateLimiter::MergeFrom(const ModelRateLimiter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelRateLimiter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resources_.MergeFrom(from.resources_);
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
}

void ModelRateLimiter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelRateLimiter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelRateLimiter::CopyFrom(const ModelRateLimiter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelRateLimiter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelRateLimiter::IsInitialized() const {
  return true;
}

void ModelRateLimiter::InternalSwap(ModelRateLimiter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resources_.InternalSwap(&other->resources_);
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelRateLimiter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelInstanceGroup::_Internal {
 public:
  static const ::inference::ModelRateLimiter& rate_limiter(const ModelInstanceGroup* msg);
};

const ::inference::ModelRateLimiter&
ModelInstanceGroup::_Internal::rate_limiter(const ModelInstanceGroup* msg) {
  return *msg->rate_limiter_;
}
ModelInstanceGroup::ModelInstanceGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gpus_(arena),
  profile_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelInstanceGroup)
}
ModelInstanceGroup::ModelInstanceGroup(const ModelInstanceGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gpus_(from.gpus_),
      profile_(from.profile_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_rate_limiter()) {
    rate_limiter_ = new ::inference::ModelRateLimiter(*from.rate_limiter_);
  } else {
    rate_limiter_ = nullptr;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&count_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:inference.ModelInstanceGroup)
}

void ModelInstanceGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelInstanceGroup_model_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&rate_limiter_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&rate_limiter_)) + sizeof(kind_));
}

ModelInstanceGroup::~ModelInstanceGroup() {
  // @@protoc_insertion_point(destructor:inference.ModelInstanceGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelInstanceGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rate_limiter_;
}

void ModelInstanceGroup::ArenaDtor(void* object) {
  ModelInstanceGroup* _this = reinterpret_cast< ModelInstanceGroup* >(object);
  (void)_this;
}
void ModelInstanceGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelInstanceGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelInstanceGroup& ModelInstanceGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelInstanceGroup_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelInstanceGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelInstanceGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpus_.Clear();
  profile_.Clear();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && rate_limiter_ != nullptr) {
    delete rate_limiter_;
  }
  rate_limiter_ = nullptr;
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&count_)) + sizeof(kind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelInstanceGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelInstanceGroup.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 gpus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gpus(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_gpus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelInstanceGroup.Kind kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::inference::ModelInstanceGroup_Kind>(val));
        } else goto handle_unusual;
        continue;
      // repeated string profile = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_profile();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelInstanceGroup.profile"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .inference.ModelRateLimiter rate_limiter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate_limiter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelInstanceGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelInstanceGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelInstanceGroup.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated int32 gpus = 3;
  {
    int byte_size = _gpus_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_gpus(), byte_size, target);
    }
  }

  // .inference.ModelInstanceGroup.Kind kind = 4;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_kind(), target);
  }

  // repeated string profile = 5;
  for (int i = 0, n = this->_internal_profile_size(); i < n; i++) {
    const auto& s = this->_internal_profile(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelInstanceGroup.profile");
    target = stream->WriteString(5, s, target);
  }

  // .inference.ModelRateLimiter rate_limiter = 6;
  if (this->has_rate_limiter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::rate_limiter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelInstanceGroup)
  return target;
}

size_t ModelInstanceGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelInstanceGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gpus = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gpus_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gpus_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string profile = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(profile_.size());
  for (int i = 0, n = profile_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      profile_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .inference.ModelRateLimiter rate_limiter = 6;
  if (this->has_rate_limiter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rate_limiter_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // .inference.ModelInstanceGroup.Kind kind = 4;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInstanceGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelInstanceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInstanceGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelInstanceGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelInstanceGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelInstanceGroup)
    MergeFrom(*source);
  }
}

void ModelInstanceGroup::MergeFrom(const ModelInstanceGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelInstanceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gpus_.MergeFrom(from.gpus_);
  profile_.MergeFrom(from.profile_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_rate_limiter()) {
    _internal_mutable_rate_limiter()->::inference::ModelRateLimiter::MergeFrom(from._internal_rate_limiter());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void ModelInstanceGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelInstanceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInstanceGroup::CopyFrom(const ModelInstanceGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelInstanceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInstanceGroup::IsInitialized() const {
  return true;
}

void ModelInstanceGroup::InternalSwap(ModelInstanceGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gpus_.InternalSwap(&other->gpus_);
  profile_.InternalSwap(&other->profile_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelInstanceGroup, kind_)
      + sizeof(ModelInstanceGroup::kind_)
      - PROTOBUF_FIELD_OFFSET(ModelInstanceGroup, rate_limiter_)>(
          reinterpret_cast<char*>(&rate_limiter_),
          reinterpret_cast<char*>(&other->rate_limiter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelInstanceGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelTensorReshape::_Internal {
 public:
};

ModelTensorReshape::ModelTensorReshape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelTensorReshape)
}
ModelTensorReshape::ModelTensorReshape(const ModelTensorReshape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inference.ModelTensorReshape)
}

void ModelTensorReshape::SharedCtor() {
}

ModelTensorReshape::~ModelTensorReshape() {
  // @@protoc_insertion_point(destructor:inference.ModelTensorReshape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelTensorReshape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelTensorReshape::ArenaDtor(void* object) {
  ModelTensorReshape* _this = reinterpret_cast< ModelTensorReshape* >(object);
  (void)_this;
}
void ModelTensorReshape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelTensorReshape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelTensorReshape& ModelTensorReshape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelTensorReshape_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelTensorReshape::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelTensorReshape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelTensorReshape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelTensorReshape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelTensorReshape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 shape = 1;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_shape(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelTensorReshape)
  return target;
}

size_t ModelTensorReshape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelTensorReshape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelTensorReshape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelTensorReshape)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelTensorReshape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelTensorReshape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelTensorReshape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelTensorReshape)
    MergeFrom(*source);
  }
}

void ModelTensorReshape::MergeFrom(const ModelTensorReshape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelTensorReshape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
}

void ModelTensorReshape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelTensorReshape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelTensorReshape::CopyFrom(const ModelTensorReshape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelTensorReshape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTensorReshape::IsInitialized() const {
  return true;
}

void ModelTensorReshape::InternalSwap(ModelTensorReshape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTensorReshape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelInput::_Internal {
 public:
  static const ::inference::ModelTensorReshape& reshape(const ModelInput* msg);
};

const ::inference::ModelTensorReshape&
ModelInput::_Internal::reshape(const ModelInput* msg) {
  return *msg->reshape_;
}
ModelInput::ModelInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dims_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelInput)
}
ModelInput::ModelInput(const ModelInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_reshape()) {
    reshape_ = new ::inference::ModelTensorReshape(*from.reshape_);
  } else {
    reshape_ = nullptr;
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_ragged_batch_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(allow_ragged_batch_));
  // @@protoc_insertion_point(copy_constructor:inference.ModelInput)
}

void ModelInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelInput_model_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reshape_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&allow_ragged_batch_) -
      reinterpret_cast<char*>(&reshape_)) + sizeof(allow_ragged_batch_));
}

ModelInput::~ModelInput() {
  // @@protoc_insertion_point(destructor:inference.ModelInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reshape_;
}

void ModelInput::ArenaDtor(void* object) {
  ModelInput* _this = reinterpret_cast< ModelInput* >(object);
  (void)_this;
}
void ModelInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelInput& ModelInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelInput_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelInput::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && reshape_ != nullptr) {
    delete reshape_;
  }
  reshape_ = nullptr;
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_ragged_batch_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(allow_ragged_batch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelInput.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.DataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::inference::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .inference.ModelInput.Format format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::inference::ModelInput_Format>(val));
        } else goto handle_unusual;
        continue;
      // repeated int64 dims = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelTensorReshape reshape = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reshape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_shape_tensor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_shape_tensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_ragged_batch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          allow_ragged_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelInput.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .inference.DataType data_type = 2;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_type(), target);
  }

  // .inference.ModelInput.Format format = 3;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_format(), target);
  }

  // repeated int64 dims = 4;
  {
    int byte_size = _dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_dims(), byte_size, target);
    }
  }

  // .inference.ModelTensorReshape reshape = 5;
  if (this->has_reshape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reshape(this), target, stream);
  }

  // bool is_shape_tensor = 6;
  if (this->is_shape_tensor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_shape_tensor(), target);
  }

  // bool allow_ragged_batch = 7;
  if (this->allow_ragged_batch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_allow_ragged_batch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelInput)
  return target;
}

size_t ModelInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .inference.ModelTensorReshape reshape = 5;
  if (this->has_reshape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reshape_);
  }

  // .inference.DataType data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // .inference.ModelInput.Format format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // bool is_shape_tensor = 6;
  if (this->is_shape_tensor() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_ragged_batch = 7;
  if (this->allow_ragged_batch() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelInput)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelInput)
    MergeFrom(*source);
  }
}

void ModelInput::MergeFrom(const ModelInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_reshape()) {
    _internal_mutable_reshape()->::inference::ModelTensorReshape::MergeFrom(from._internal_reshape());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.is_shape_tensor() != 0) {
    _internal_set_is_shape_tensor(from._internal_is_shape_tensor());
  }
  if (from.allow_ragged_batch() != 0) {
    _internal_set_allow_ragged_batch(from._internal_allow_ragged_batch());
  }
}

void ModelInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInput::CopyFrom(const ModelInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInput::IsInitialized() const {
  return true;
}

void ModelInput::InternalSwap(ModelInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dims_.InternalSwap(&other->dims_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelInput, allow_ragged_batch_)
      + sizeof(ModelInput::allow_ragged_batch_)
      - PROTOBUF_FIELD_OFFSET(ModelInput, reshape_)>(
          reinterpret_cast<char*>(&reshape_),
          reinterpret_cast<char*>(&other->reshape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelOutput::_Internal {
 public:
  static const ::inference::ModelTensorReshape& reshape(const ModelOutput* msg);
};

const ::inference::ModelTensorReshape&
ModelOutput::_Internal::reshape(const ModelOutput* msg) {
  return *msg->reshape_;
}
ModelOutput::ModelOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dims_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelOutput)
}
ModelOutput::ModelOutput(const ModelOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  label_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label_filename().empty()) {
    label_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label_filename(), 
      GetArena());
  }
  if (from._internal_has_reshape()) {
    reshape_ = new ::inference::ModelTensorReshape(*from.reshape_);
  } else {
    reshape_ = nullptr;
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_shape_tensor_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(is_shape_tensor_));
  // @@protoc_insertion_point(copy_constructor:inference.ModelOutput)
}

void ModelOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelOutput_model_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reshape_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_shape_tensor_) -
      reinterpret_cast<char*>(&reshape_)) + sizeof(is_shape_tensor_));
}

ModelOutput::~ModelOutput() {
  // @@protoc_insertion_point(destructor:inference.ModelOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reshape_;
}

void ModelOutput::ArenaDtor(void* object) {
  ModelOutput* _this = reinterpret_cast< ModelOutput* >(object);
  (void)_this;
}
void ModelOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOutput& ModelOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOutput_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  name_.ClearToEmpty();
  label_filename_.ClearToEmpty();
  if (GetArena() == nullptr && reshape_ != nullptr) {
    delete reshape_;
  }
  reshape_ = nullptr;
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_shape_tensor_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(is_shape_tensor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelOutput.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.DataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::inference::DataType>(val));
        } else goto handle_unusual;
        continue;
      // repeated int64 dims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label_filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_label_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelOutput.label_filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelTensorReshape reshape = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reshape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_shape_tensor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_shape_tensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelOutput.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .inference.DataType data_type = 2;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_type(), target);
  }

  // repeated int64 dims = 3;
  {
    int byte_size = _dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_dims(), byte_size, target);
    }
  }

  // string label_filename = 4;
  if (this->label_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label_filename().data(), static_cast<int>(this->_internal_label_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelOutput.label_filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label_filename(), target);
  }

  // .inference.ModelTensorReshape reshape = 5;
  if (this->has_reshape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reshape(this), target, stream);
  }

  // bool is_shape_tensor = 6;
  if (this->is_shape_tensor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_shape_tensor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelOutput)
  return target;
}

size_t ModelOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string label_filename = 4;
  if (this->label_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label_filename());
  }

  // .inference.ModelTensorReshape reshape = 5;
  if (this->has_reshape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reshape_);
  }

  // .inference.DataType data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // bool is_shape_tensor = 6;
  if (this->is_shape_tensor() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelOutput)
    MergeFrom(*source);
  }
}

void ModelOutput::MergeFrom(const ModelOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.label_filename().size() > 0) {
    _internal_set_label_filename(from._internal_label_filename());
  }
  if (from.has_reshape()) {
    _internal_mutable_reshape()->::inference::ModelTensorReshape::MergeFrom(from._internal_reshape());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.is_shape_tensor() != 0) {
    _internal_set_is_shape_tensor(from._internal_is_shape_tensor());
  }
}

void ModelOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOutput::CopyFrom(const ModelOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOutput::IsInitialized() const {
  return true;
}

void ModelOutput::InternalSwap(ModelOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dims_.InternalSwap(&other->dims_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_filename_.Swap(&other->label_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelOutput, is_shape_tensor_)
      + sizeof(ModelOutput::is_shape_tensor_)
      - PROTOBUF_FIELD_OFFSET(ModelOutput, reshape_)>(
          reinterpret_cast<char*>(&reshape_),
          reinterpret_cast<char*>(&other->reshape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BatchInput::_Internal {
 public:
};

BatchInput::BatchInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  target_name_(arena),
  source_input_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.BatchInput)
}
BatchInput::BatchInput(const BatchInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      target_name_(from.target_name_),
      source_input_(from.source_input_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:inference.BatchInput)
}

void BatchInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchInput_model_5fconfig_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(data_type_));
}

BatchInput::~BatchInput() {
  // @@protoc_insertion_point(destructor:inference.BatchInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BatchInput::ArenaDtor(void* object) {
  BatchInput* _this = reinterpret_cast< BatchInput* >(object);
  (void)_this;
}
void BatchInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchInput& BatchInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchInput_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void BatchInput::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.BatchInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_name_.Clear();
  source_input_.Clear();
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(data_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .inference.BatchInput.Kind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::inference::BatchInput_Kind>(val));
        } else goto handle_unusual;
        continue;
      // repeated string target_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.BatchInput.target_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .inference.DataType data_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::inference::DataType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string source_input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_source_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.BatchInput.source_input"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.BatchInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .inference.BatchInput.Kind kind = 1;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // repeated string target_name = 2;
  for (int i = 0, n = this->_internal_target_name_size(); i < n; i++) {
    const auto& s = this->_internal_target_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.BatchInput.target_name");
    target = stream->WriteString(2, s, target);
  }

  // .inference.DataType data_type = 3;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_data_type(), target);
  }

  // repeated string source_input = 4;
  for (int i = 0, n = this->_internal_source_input_size(); i < n; i++) {
    const auto& s = this->_internal_source_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.BatchInput.source_input");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.BatchInput)
  return target;
}

size_t BatchInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.BatchInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string target_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(target_name_.size());
  for (int i = 0, n = target_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      target_name_.Get(i));
  }

  // repeated string source_input = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(source_input_.size());
  for (int i = 0, n = source_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      source_input_.Get(i));
  }

  // .inference.BatchInput.Kind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  // .inference.DataType data_type = 3;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.BatchInput)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.BatchInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.BatchInput)
    MergeFrom(*source);
  }
}

void BatchInput::MergeFrom(const BatchInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.BatchInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_name_.MergeFrom(from.target_name_);
  source_input_.MergeFrom(from.source_input_);
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
}

void BatchInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.BatchInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchInput::CopyFrom(const BatchInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.BatchInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchInput::IsInitialized() const {
  return true;
}

void BatchInput::InternalSwap(BatchInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_name_.InternalSwap(&other->target_name_);
  source_input_.InternalSwap(&other->source_input_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchInput, data_type_)
      + sizeof(BatchInput::data_type_)
      - PROTOBUF_FIELD_OFFSET(BatchInput, kind_)>(
          reinterpret_cast<char*>(&kind_),
          reinterpret_cast<char*>(&other->kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BatchOutput::_Internal {
 public:
};

BatchOutput::BatchOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  target_name_(arena),
  source_input_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.BatchOutput)
}
BatchOutput::BatchOutput(const BatchOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      target_name_(from.target_name_),
      source_input_(from.source_input_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:inference.BatchOutput)
}

void BatchOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchOutput_model_5fconfig_2eproto.base);
  kind_ = 0;
}

BatchOutput::~BatchOutput() {
  // @@protoc_insertion_point(destructor:inference.BatchOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BatchOutput::ArenaDtor(void* object) {
  BatchOutput* _this = reinterpret_cast< BatchOutput* >(object);
  (void)_this;
}
void BatchOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchOutput& BatchOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchOutput_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void BatchOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.BatchOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_name_.Clear();
  source_input_.Clear();
  kind_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string target_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.BatchOutput.target_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .inference.BatchOutput.Kind kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::inference::BatchOutput_Kind>(val));
        } else goto handle_unusual;
        continue;
      // repeated string source_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_source_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.BatchOutput.source_input"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.BatchOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string target_name = 1;
  for (int i = 0, n = this->_internal_target_name_size(); i < n; i++) {
    const auto& s = this->_internal_target_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.BatchOutput.target_name");
    target = stream->WriteString(1, s, target);
  }

  // .inference.BatchOutput.Kind kind = 2;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kind(), target);
  }

  // repeated string source_input = 3;
  for (int i = 0, n = this->_internal_source_input_size(); i < n; i++) {
    const auto& s = this->_internal_source_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.BatchOutput.source_input");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.BatchOutput)
  return target;
}

size_t BatchOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.BatchOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string target_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(target_name_.size());
  for (int i = 0, n = target_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      target_name_.Get(i));
  }

  // repeated string source_input = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(source_input_.size());
  for (int i = 0, n = source_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      source_input_.Get(i));
  }

  // .inference.BatchOutput.Kind kind = 2;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.BatchOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.BatchOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.BatchOutput)
    MergeFrom(*source);
  }
}

void BatchOutput::MergeFrom(const BatchOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.BatchOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_name_.MergeFrom(from.target_name_);
  source_input_.MergeFrom(from.source_input_);
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void BatchOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.BatchOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchOutput::CopyFrom(const BatchOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.BatchOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchOutput::IsInitialized() const {
  return true;
}

void BatchOutput::InternalSwap(BatchOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_name_.InternalSwap(&other->target_name_);
  source_input_.InternalSwap(&other->source_input_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelVersionPolicy_Latest::_Internal {
 public:
};

ModelVersionPolicy_Latest::ModelVersionPolicy_Latest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelVersionPolicy.Latest)
}
ModelVersionPolicy_Latest::ModelVersionPolicy_Latest(const ModelVersionPolicy_Latest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_versions_ = from.num_versions_;
  // @@protoc_insertion_point(copy_constructor:inference.ModelVersionPolicy.Latest)
}

void ModelVersionPolicy_Latest::SharedCtor() {
  num_versions_ = 0u;
}

ModelVersionPolicy_Latest::~ModelVersionPolicy_Latest() {
  // @@protoc_insertion_point(destructor:inference.ModelVersionPolicy.Latest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelVersionPolicy_Latest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelVersionPolicy_Latest::ArenaDtor(void* object) {
  ModelVersionPolicy_Latest* _this = reinterpret_cast< ModelVersionPolicy_Latest* >(object);
  (void)_this;
}
void ModelVersionPolicy_Latest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelVersionPolicy_Latest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelVersionPolicy_Latest& ModelVersionPolicy_Latest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelVersionPolicy_Latest_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelVersionPolicy_Latest::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelVersionPolicy.Latest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_versions_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersionPolicy_Latest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_versions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelVersionPolicy_Latest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelVersionPolicy.Latest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_versions = 1;
  if (this->num_versions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_versions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelVersionPolicy.Latest)
  return target;
}

size_t ModelVersionPolicy_Latest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelVersionPolicy.Latest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_versions = 1;
  if (this->num_versions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_versions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelVersionPolicy_Latest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelVersionPolicy.Latest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelVersionPolicy_Latest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelVersionPolicy_Latest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelVersionPolicy.Latest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelVersionPolicy.Latest)
    MergeFrom(*source);
  }
}

void ModelVersionPolicy_Latest::MergeFrom(const ModelVersionPolicy_Latest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelVersionPolicy.Latest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_versions() != 0) {
    _internal_set_num_versions(from._internal_num_versions());
  }
}

void ModelVersionPolicy_Latest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelVersionPolicy.Latest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelVersionPolicy_Latest::CopyFrom(const ModelVersionPolicy_Latest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelVersionPolicy.Latest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionPolicy_Latest::IsInitialized() const {
  return true;
}

void ModelVersionPolicy_Latest::InternalSwap(ModelVersionPolicy_Latest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(num_versions_, other->num_versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionPolicy_Latest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelVersionPolicy_All::_Internal {
 public:
};

ModelVersionPolicy_All::ModelVersionPolicy_All(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelVersionPolicy.All)
}
ModelVersionPolicy_All::ModelVersionPolicy_All(const ModelVersionPolicy_All& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inference.ModelVersionPolicy.All)
}

void ModelVersionPolicy_All::SharedCtor() {
}

ModelVersionPolicy_All::~ModelVersionPolicy_All() {
  // @@protoc_insertion_point(destructor:inference.ModelVersionPolicy.All)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelVersionPolicy_All::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelVersionPolicy_All::ArenaDtor(void* object) {
  ModelVersionPolicy_All* _this = reinterpret_cast< ModelVersionPolicy_All* >(object);
  (void)_this;
}
void ModelVersionPolicy_All::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelVersionPolicy_All::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelVersionPolicy_All& ModelVersionPolicy_All::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelVersionPolicy_All_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelVersionPolicy_All::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelVersionPolicy.All)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersionPolicy_All::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelVersionPolicy_All::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelVersionPolicy.All)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelVersionPolicy.All)
  return target;
}

size_t ModelVersionPolicy_All::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelVersionPolicy.All)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelVersionPolicy_All::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelVersionPolicy.All)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelVersionPolicy_All* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelVersionPolicy_All>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelVersionPolicy.All)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelVersionPolicy.All)
    MergeFrom(*source);
  }
}

void ModelVersionPolicy_All::MergeFrom(const ModelVersionPolicy_All& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelVersionPolicy.All)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ModelVersionPolicy_All::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelVersionPolicy.All)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelVersionPolicy_All::CopyFrom(const ModelVersionPolicy_All& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelVersionPolicy.All)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionPolicy_All::IsInitialized() const {
  return true;
}

void ModelVersionPolicy_All::InternalSwap(ModelVersionPolicy_All* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionPolicy_All::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelVersionPolicy_Specific::_Internal {
 public:
};

ModelVersionPolicy_Specific::ModelVersionPolicy_Specific(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  versions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelVersionPolicy.Specific)
}
ModelVersionPolicy_Specific::ModelVersionPolicy_Specific(const ModelVersionPolicy_Specific& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      versions_(from.versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inference.ModelVersionPolicy.Specific)
}

void ModelVersionPolicy_Specific::SharedCtor() {
}

ModelVersionPolicy_Specific::~ModelVersionPolicy_Specific() {
  // @@protoc_insertion_point(destructor:inference.ModelVersionPolicy.Specific)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelVersionPolicy_Specific::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelVersionPolicy_Specific::ArenaDtor(void* object) {
  ModelVersionPolicy_Specific* _this = reinterpret_cast< ModelVersionPolicy_Specific* >(object);
  (void)_this;
}
void ModelVersionPolicy_Specific::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelVersionPolicy_Specific::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelVersionPolicy_Specific& ModelVersionPolicy_Specific::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelVersionPolicy_Specific_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelVersionPolicy_Specific::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelVersionPolicy.Specific)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersionPolicy_Specific::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_versions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_versions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelVersionPolicy_Specific::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelVersionPolicy.Specific)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 versions = 1;
  {
    int byte_size = _versions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_versions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelVersionPolicy.Specific)
  return target;
}

size_t ModelVersionPolicy_Specific::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelVersionPolicy.Specific)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 versions = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->versions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _versions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelVersionPolicy_Specific::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelVersionPolicy.Specific)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelVersionPolicy_Specific* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelVersionPolicy_Specific>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelVersionPolicy.Specific)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelVersionPolicy.Specific)
    MergeFrom(*source);
  }
}

void ModelVersionPolicy_Specific::MergeFrom(const ModelVersionPolicy_Specific& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelVersionPolicy.Specific)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
}

void ModelVersionPolicy_Specific::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelVersionPolicy.Specific)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelVersionPolicy_Specific::CopyFrom(const ModelVersionPolicy_Specific& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelVersionPolicy.Specific)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionPolicy_Specific::IsInitialized() const {
  return true;
}

void ModelVersionPolicy_Specific::InternalSwap(ModelVersionPolicy_Specific* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  versions_.InternalSwap(&other->versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionPolicy_Specific::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelVersionPolicy::_Internal {
 public:
  static const ::inference::ModelVersionPolicy_Latest& latest(const ModelVersionPolicy* msg);
  static const ::inference::ModelVersionPolicy_All& all(const ModelVersionPolicy* msg);
  static const ::inference::ModelVersionPolicy_Specific& specific(const ModelVersionPolicy* msg);
};

const ::inference::ModelVersionPolicy_Latest&
ModelVersionPolicy::_Internal::latest(const ModelVersionPolicy* msg) {
  return *msg->policy_choice_.latest_;
}
const ::inference::ModelVersionPolicy_All&
ModelVersionPolicy::_Internal::all(const ModelVersionPolicy* msg) {
  return *msg->policy_choice_.all_;
}
const ::inference::ModelVersionPolicy_Specific&
ModelVersionPolicy::_Internal::specific(const ModelVersionPolicy* msg) {
  return *msg->policy_choice_.specific_;
}
void ModelVersionPolicy::set_allocated_latest(::inference::ModelVersionPolicy_Latest* latest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_policy_choice();
  if (latest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(latest);
    if (message_arena != submessage_arena) {
      latest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest, submessage_arena);
    }
    set_has_latest();
    policy_choice_.latest_ = latest;
  }
  // @@protoc_insertion_point(field_set_allocated:inference.ModelVersionPolicy.latest)
}
void ModelVersionPolicy::set_allocated_all(::inference::ModelVersionPolicy_All* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_policy_choice();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(all);
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    policy_choice_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:inference.ModelVersionPolicy.all)
}
void ModelVersionPolicy::set_allocated_specific(::inference::ModelVersionPolicy_Specific* specific) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_policy_choice();
  if (specific) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(specific);
    if (message_arena != submessage_arena) {
      specific = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specific, submessage_arena);
    }
    set_has_specific();
    policy_choice_.specific_ = specific;
  }
  // @@protoc_insertion_point(field_set_allocated:inference.ModelVersionPolicy.specific)
}
ModelVersionPolicy::ModelVersionPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelVersionPolicy)
}
ModelVersionPolicy::ModelVersionPolicy(const ModelVersionPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_policy_choice();
  switch (from.policy_choice_case()) {
    case kLatest: {
      _internal_mutable_latest()->::inference::ModelVersionPolicy_Latest::MergeFrom(from._internal_latest());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::inference::ModelVersionPolicy_All::MergeFrom(from._internal_all());
      break;
    }
    case kSpecific: {
      _internal_mutable_specific()->::inference::ModelVersionPolicy_Specific::MergeFrom(from._internal_specific());
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inference.ModelVersionPolicy)
}

void ModelVersionPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelVersionPolicy_model_5fconfig_2eproto.base);
  clear_has_policy_choice();
}

ModelVersionPolicy::~ModelVersionPolicy() {
  // @@protoc_insertion_point(destructor:inference.ModelVersionPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelVersionPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_policy_choice()) {
    clear_policy_choice();
  }
}

void ModelVersionPolicy::ArenaDtor(void* object) {
  ModelVersionPolicy* _this = reinterpret_cast< ModelVersionPolicy* >(object);
  (void)_this;
}
void ModelVersionPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelVersionPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelVersionPolicy& ModelVersionPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelVersionPolicy_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelVersionPolicy::clear_policy_choice() {
// @@protoc_insertion_point(one_of_clear_start:inference.ModelVersionPolicy)
  switch (policy_choice_case()) {
    case kLatest: {
      if (GetArena() == nullptr) {
        delete policy_choice_.latest_;
      }
      break;
    }
    case kAll: {
      if (GetArena() == nullptr) {
        delete policy_choice_.all_;
      }
      break;
    }
    case kSpecific: {
      if (GetArena() == nullptr) {
        delete policy_choice_.specific_;
      }
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POLICY_CHOICE_NOT_SET;
}


void ModelVersionPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelVersionPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_policy_choice();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersionPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .inference.ModelVersionPolicy.Latest latest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelVersionPolicy.All all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelVersionPolicy.Specific specific = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_specific(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelVersionPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelVersionPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .inference.ModelVersionPolicy.Latest latest = 1;
  if (_internal_has_latest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::latest(this), target, stream);
  }

  // .inference.ModelVersionPolicy.All all = 2;
  if (_internal_has_all()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::all(this), target, stream);
  }

  // .inference.ModelVersionPolicy.Specific specific = 3;
  if (_internal_has_specific()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::specific(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelVersionPolicy)
  return target;
}

size_t ModelVersionPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelVersionPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (policy_choice_case()) {
    // .inference.ModelVersionPolicy.Latest latest = 1;
    case kLatest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_choice_.latest_);
      break;
    }
    // .inference.ModelVersionPolicy.All all = 2;
    case kAll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_choice_.all_);
      break;
    }
    // .inference.ModelVersionPolicy.Specific specific = 3;
    case kSpecific: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_choice_.specific_);
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelVersionPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelVersionPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelVersionPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelVersionPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelVersionPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelVersionPolicy)
    MergeFrom(*source);
  }
}

void ModelVersionPolicy::MergeFrom(const ModelVersionPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelVersionPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.policy_choice_case()) {
    case kLatest: {
      _internal_mutable_latest()->::inference::ModelVersionPolicy_Latest::MergeFrom(from._internal_latest());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::inference::ModelVersionPolicy_All::MergeFrom(from._internal_all());
      break;
    }
    case kSpecific: {
      _internal_mutable_specific()->::inference::ModelVersionPolicy_Specific::MergeFrom(from._internal_specific());
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
}

void ModelVersionPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelVersionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelVersionPolicy::CopyFrom(const ModelVersionPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelVersionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionPolicy::IsInitialized() const {
  return true;
}

void ModelVersionPolicy::InternalSwap(ModelVersionPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(policy_choice_, other->policy_choice_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelOptimizationPolicy_Graph::_Internal {
 public:
};

ModelOptimizationPolicy_Graph::ModelOptimizationPolicy_Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelOptimizationPolicy.Graph)
}
ModelOptimizationPolicy_Graph::ModelOptimizationPolicy_Graph(const ModelOptimizationPolicy_Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:inference.ModelOptimizationPolicy.Graph)
}

void ModelOptimizationPolicy_Graph::SharedCtor() {
  level_ = 0;
}

ModelOptimizationPolicy_Graph::~ModelOptimizationPolicy_Graph() {
  // @@protoc_insertion_point(destructor:inference.ModelOptimizationPolicy.Graph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelOptimizationPolicy_Graph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelOptimizationPolicy_Graph::ArenaDtor(void* object) {
  ModelOptimizationPolicy_Graph* _this = reinterpret_cast< ModelOptimizationPolicy_Graph* >(object);
  (void)_this;
}
void ModelOptimizationPolicy_Graph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOptimizationPolicy_Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOptimizationPolicy_Graph& ModelOptimizationPolicy_Graph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOptimizationPolicy_Graph_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOptimizationPolicy_Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelOptimizationPolicy.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelOptimizationPolicy_Graph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOptimizationPolicy_Graph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelOptimizationPolicy.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelOptimizationPolicy.Graph)
  return target;
}

size_t ModelOptimizationPolicy_Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelOptimizationPolicy.Graph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOptimizationPolicy_Graph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelOptimizationPolicy.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOptimizationPolicy_Graph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOptimizationPolicy_Graph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelOptimizationPolicy.Graph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelOptimizationPolicy.Graph)
    MergeFrom(*source);
  }
}

void ModelOptimizationPolicy_Graph::MergeFrom(const ModelOptimizationPolicy_Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelOptimizationPolicy.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void ModelOptimizationPolicy_Graph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelOptimizationPolicy.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOptimizationPolicy_Graph::CopyFrom(const ModelOptimizationPolicy_Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelOptimizationPolicy.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOptimizationPolicy_Graph::IsInitialized() const {
  return true;
}

void ModelOptimizationPolicy_Graph::InternalSwap(ModelOptimizationPolicy_Graph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy_Graph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelOptimizationPolicy_Cuda_GraphSpec_Shape::_Internal {
 public:
};

ModelOptimizationPolicy_Cuda_GraphSpec_Shape::ModelOptimizationPolicy_Cuda_GraphSpec_Shape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dim_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
}
ModelOptimizationPolicy_Cuda_GraphSpec_Shape::ModelOptimizationPolicy_Cuda_GraphSpec_Shape(const ModelOptimizationPolicy_Cuda_GraphSpec_Shape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
}

void ModelOptimizationPolicy_Cuda_GraphSpec_Shape::SharedCtor() {
}

ModelOptimizationPolicy_Cuda_GraphSpec_Shape::~ModelOptimizationPolicy_Cuda_GraphSpec_Shape() {
  // @@protoc_insertion_point(destructor:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelOptimizationPolicy_Cuda_GraphSpec_Shape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelOptimizationPolicy_Cuda_GraphSpec_Shape::ArenaDtor(void* object) {
  ModelOptimizationPolicy_Cuda_GraphSpec_Shape* _this = reinterpret_cast< ModelOptimizationPolicy_Cuda_GraphSpec_Shape* >(object);
  (void)_this;
}
void ModelOptimizationPolicy_Cuda_GraphSpec_Shape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOptimizationPolicy_Cuda_GraphSpec_Shape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOptimizationPolicy_Cuda_GraphSpec_Shape& ModelOptimizationPolicy_Cuda_GraphSpec_Shape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_Shape_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOptimizationPolicy_Cuda_GraphSpec_Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelOptimizationPolicy_Cuda_GraphSpec_Shape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 dim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOptimizationPolicy_Cuda_GraphSpec_Shape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dim = 1;
  {
    int byte_size = _dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dim(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
  return target;
}

size_t ModelOptimizationPolicy_Cuda_GraphSpec_Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dim = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOptimizationPolicy_Cuda_GraphSpec_Shape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOptimizationPolicy_Cuda_GraphSpec_Shape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOptimizationPolicy_Cuda_GraphSpec_Shape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
    MergeFrom(*source);
  }
}

void ModelOptimizationPolicy_Cuda_GraphSpec_Shape::MergeFrom(const ModelOptimizationPolicy_Cuda_GraphSpec_Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
}

void ModelOptimizationPolicy_Cuda_GraphSpec_Shape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOptimizationPolicy_Cuda_GraphSpec_Shape::CopyFrom(const ModelOptimizationPolicy_Cuda_GraphSpec_Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOptimizationPolicy_Cuda_GraphSpec_Shape::IsInitialized() const {
  return true;
}

void ModelOptimizationPolicy_Cuda_GraphSpec_Shape::InternalSwap(ModelOptimizationPolicy_Cuda_GraphSpec_Shape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy_Cuda_GraphSpec_Shape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse() {}
ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse::MergeFrom(const ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::_Internal {
 public:
};

ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
}
ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound(const ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_.MergeFrom(from.input_);
  batch_size_ = from.batch_size_;
  // @@protoc_insertion_point(copy_constructor:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
}

void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_model_5fconfig_2eproto.base);
  batch_size_ = 0;
}

ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::~ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound() {
  // @@protoc_insertion_point(destructor:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::ArenaDtor(void* object) {
  ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound* _this = reinterpret_cast< ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound* >(object);
  (void)_this;
}
void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound& ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  batch_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 batch_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape> input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 batch_size = 1;
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_batch_size(), target);
  }

  // map<string, .inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape> input = 2;
  if (!this->_internal_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound.InputEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it) {
        target = ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
  return target;
}

size_t ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape> input = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >::const_iterator
      it = this->_internal_input().begin();
      it != this->_internal_input().end(); ++it) {
    total_size += ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 batch_size = 1;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
    MergeFrom(*source);
  }
}

void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::MergeFrom(const ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
}

void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::CopyFrom(const ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::IsInitialized() const {
  return true;
}

void ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::InternalSwap(ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_.Swap(&other->input_);
  swap(batch_size_, other->batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse::ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse() {}
ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse::ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse::MergeFrom(const ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ModelOptimizationPolicy_Cuda_GraphSpec::_Internal {
 public:
  static const ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound& graph_lower_bound(const ModelOptimizationPolicy_Cuda_GraphSpec* msg);
};

const ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound&
ModelOptimizationPolicy_Cuda_GraphSpec::_Internal::graph_lower_bound(const ModelOptimizationPolicy_Cuda_GraphSpec* msg) {
  return *msg->graph_lower_bound_;
}
ModelOptimizationPolicy_Cuda_GraphSpec::ModelOptimizationPolicy_Cuda_GraphSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
}
ModelOptimizationPolicy_Cuda_GraphSpec::ModelOptimizationPolicy_Cuda_GraphSpec(const ModelOptimizationPolicy_Cuda_GraphSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_.MergeFrom(from.input_);
  if (from._internal_has_graph_lower_bound()) {
    graph_lower_bound_ = new ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound(*from.graph_lower_bound_);
  } else {
    graph_lower_bound_ = nullptr;
  }
  batch_size_ = from.batch_size_;
  // @@protoc_insertion_point(copy_constructor:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
}

void ModelOptimizationPolicy_Cuda_GraphSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_model_5fconfig_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&graph_lower_bound_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
      reinterpret_cast<char*>(&graph_lower_bound_)) + sizeof(batch_size_));
}

ModelOptimizationPolicy_Cuda_GraphSpec::~ModelOptimizationPolicy_Cuda_GraphSpec() {
  // @@protoc_insertion_point(destructor:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelOptimizationPolicy_Cuda_GraphSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete graph_lower_bound_;
}

void ModelOptimizationPolicy_Cuda_GraphSpec::ArenaDtor(void* object) {
  ModelOptimizationPolicy_Cuda_GraphSpec* _this = reinterpret_cast< ModelOptimizationPolicy_Cuda_GraphSpec* >(object);
  (void)_this;
}
void ModelOptimizationPolicy_Cuda_GraphSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOptimizationPolicy_Cuda_GraphSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOptimizationPolicy_Cuda_GraphSpec& ModelOptimizationPolicy_Cuda_GraphSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOptimizationPolicy_Cuda_GraphSpec_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOptimizationPolicy_Cuda_GraphSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  if (GetArena() == nullptr && graph_lower_bound_ != nullptr) {
    delete graph_lower_bound_;
  }
  graph_lower_bound_ = nullptr;
  batch_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelOptimizationPolicy_Cuda_GraphSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 batch_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape> input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound graph_lower_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_lower_bound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOptimizationPolicy_Cuda_GraphSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 batch_size = 1;
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_batch_size(), target);
  }

  // map<string, .inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape> input = 2;
  if (!this->_internal_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelOptimizationPolicy.Cuda.GraphSpec.InputEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >::const_iterator
          it = this->_internal_input().begin();
          it != this->_internal_input().end(); ++it) {
        target = ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound graph_lower_bound = 3;
  if (this->has_graph_lower_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::graph_lower_bound(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
  return target;
}

size_t ModelOptimizationPolicy_Cuda_GraphSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .inference.ModelOptimizationPolicy.Cuda.GraphSpec.Shape> input = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >::const_iterator
      it = this->_internal_input().begin();
      it != this->_internal_input().end(); ++it) {
    total_size += ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .inference.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound graph_lower_bound = 3;
  if (this->has_graph_lower_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_lower_bound_);
  }

  // int32 batch_size = 1;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOptimizationPolicy_Cuda_GraphSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOptimizationPolicy_Cuda_GraphSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOptimizationPolicy_Cuda_GraphSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
    MergeFrom(*source);
  }
}

void ModelOptimizationPolicy_Cuda_GraphSpec::MergeFrom(const ModelOptimizationPolicy_Cuda_GraphSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  if (from.has_graph_lower_bound()) {
    _internal_mutable_graph_lower_bound()->::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound::MergeFrom(from._internal_graph_lower_bound());
  }
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
}

void ModelOptimizationPolicy_Cuda_GraphSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOptimizationPolicy_Cuda_GraphSpec::CopyFrom(const ModelOptimizationPolicy_Cuda_GraphSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelOptimizationPolicy.Cuda.GraphSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOptimizationPolicy_Cuda_GraphSpec::IsInitialized() const {
  return true;
}

void ModelOptimizationPolicy_Cuda_GraphSpec::InternalSwap(ModelOptimizationPolicy_Cuda_GraphSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_.Swap(&other->input_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelOptimizationPolicy_Cuda_GraphSpec, batch_size_)
      + sizeof(ModelOptimizationPolicy_Cuda_GraphSpec::batch_size_)
      - PROTOBUF_FIELD_OFFSET(ModelOptimizationPolicy_Cuda_GraphSpec, graph_lower_bound_)>(
          reinterpret_cast<char*>(&graph_lower_bound_),
          reinterpret_cast<char*>(&other->graph_lower_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy_Cuda_GraphSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelOptimizationPolicy_Cuda::_Internal {
 public:
};

ModelOptimizationPolicy_Cuda::ModelOptimizationPolicy_Cuda(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  graph_spec_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelOptimizationPolicy.Cuda)
}
ModelOptimizationPolicy_Cuda::ModelOptimizationPolicy_Cuda(const ModelOptimizationPolicy_Cuda& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      graph_spec_(from.graph_spec_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&graphs_, &from.graphs_,
    static_cast<size_t>(reinterpret_cast<char*>(&busy_wait_events_) -
    reinterpret_cast<char*>(&graphs_)) + sizeof(busy_wait_events_));
  // @@protoc_insertion_point(copy_constructor:inference.ModelOptimizationPolicy.Cuda)
}

void ModelOptimizationPolicy_Cuda::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelOptimizationPolicy_Cuda_model_5fconfig_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&graphs_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&busy_wait_events_) -
      reinterpret_cast<char*>(&graphs_)) + sizeof(busy_wait_events_));
}

ModelOptimizationPolicy_Cuda::~ModelOptimizationPolicy_Cuda() {
  // @@protoc_insertion_point(destructor:inference.ModelOptimizationPolicy.Cuda)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelOptimizationPolicy_Cuda::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelOptimizationPolicy_Cuda::ArenaDtor(void* object) {
  ModelOptimizationPolicy_Cuda* _this = reinterpret_cast< ModelOptimizationPolicy_Cuda* >(object);
  (void)_this;
}
void ModelOptimizationPolicy_Cuda::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOptimizationPolicy_Cuda::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOptimizationPolicy_Cuda& ModelOptimizationPolicy_Cuda::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOptimizationPolicy_Cuda_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOptimizationPolicy_Cuda::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelOptimizationPolicy.Cuda)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_spec_.Clear();
  ::memset(&graphs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&busy_wait_events_) -
      reinterpret_cast<char*>(&graphs_)) + sizeof(busy_wait_events_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelOptimizationPolicy_Cuda::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool graphs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          graphs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool busy_wait_events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          busy_wait_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .inference.ModelOptimizationPolicy.Cuda.GraphSpec graph_spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graph_spec(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOptimizationPolicy_Cuda::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelOptimizationPolicy.Cuda)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool graphs = 1;
  if (this->graphs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_graphs(), target);
  }

  // bool busy_wait_events = 2;
  if (this->busy_wait_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_busy_wait_events(), target);
  }

  // repeated .inference.ModelOptimizationPolicy.Cuda.GraphSpec graph_spec = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_graph_spec_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_graph_spec(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelOptimizationPolicy.Cuda)
  return target;
}

size_t ModelOptimizationPolicy_Cuda::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelOptimizationPolicy.Cuda)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inference.ModelOptimizationPolicy.Cuda.GraphSpec graph_spec = 3;
  total_size += 1UL * this->_internal_graph_spec_size();
  for (const auto& msg : this->graph_spec_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool graphs = 1;
  if (this->graphs() != 0) {
    total_size += 1 + 1;
  }

  // bool busy_wait_events = 2;
  if (this->busy_wait_events() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOptimizationPolicy_Cuda::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelOptimizationPolicy.Cuda)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOptimizationPolicy_Cuda* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOptimizationPolicy_Cuda>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelOptimizationPolicy.Cuda)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelOptimizationPolicy.Cuda)
    MergeFrom(*source);
  }
}

void ModelOptimizationPolicy_Cuda::MergeFrom(const ModelOptimizationPolicy_Cuda& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelOptimizationPolicy.Cuda)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_spec_.MergeFrom(from.graph_spec_);
  if (from.graphs() != 0) {
    _internal_set_graphs(from._internal_graphs());
  }
  if (from.busy_wait_events() != 0) {
    _internal_set_busy_wait_events(from._internal_busy_wait_events());
  }
}

void ModelOptimizationPolicy_Cuda::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelOptimizationPolicy.Cuda)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOptimizationPolicy_Cuda::CopyFrom(const ModelOptimizationPolicy_Cuda& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelOptimizationPolicy.Cuda)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOptimizationPolicy_Cuda::IsInitialized() const {
  return true;
}

void ModelOptimizationPolicy_Cuda::InternalSwap(ModelOptimizationPolicy_Cuda* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  graph_spec_.InternalSwap(&other->graph_spec_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelOptimizationPolicy_Cuda, busy_wait_events_)
      + sizeof(ModelOptimizationPolicy_Cuda::busy_wait_events_)
      - PROTOBUF_FIELD_OFFSET(ModelOptimizationPolicy_Cuda, graphs_)>(
          reinterpret_cast<char*>(&graphs_),
          reinterpret_cast<char*>(&other->graphs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy_Cuda::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse() {}
ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse::MergeFrom(const ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::_Internal {
 public:
};

ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
}
ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator(const ModelOptimizationPolicy_ExecutionAccelerators_Accelerator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
}

void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_model_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::~ModelOptimizationPolicy_ExecutionAccelerators_Accelerator() {
  // @@protoc_insertion_point(destructor:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::ArenaDtor(void* object) {
  ModelOptimizationPolicy_ExecutionAccelerators_Accelerator* _this = reinterpret_cast< ModelOptimizationPolicy_ExecutionAccelerators_Accelerator* >(object);
  (void)_this;
}
void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOptimizationPolicy_ExecutionAccelerators_Accelerator& ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> parameters = 2;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator.ParametersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator.ParametersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
  return target;
}

size_t ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> parameters = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOptimizationPolicy_ExecutionAccelerators_Accelerator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOptimizationPolicy_ExecutionAccelerators_Accelerator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
    MergeFrom(*source);
  }
}

void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::MergeFrom(const ModelOptimizationPolicy_ExecutionAccelerators_Accelerator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::CopyFrom(const ModelOptimizationPolicy_ExecutionAccelerators_Accelerator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::IsInitialized() const {
  return true;
}

void ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::InternalSwap(ModelOptimizationPolicy_ExecutionAccelerators_Accelerator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameters_.Swap(&other->parameters_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy_ExecutionAccelerators_Accelerator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelOptimizationPolicy_ExecutionAccelerators::_Internal {
 public:
};

ModelOptimizationPolicy_ExecutionAccelerators::ModelOptimizationPolicy_ExecutionAccelerators(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gpu_execution_accelerator_(arena),
  cpu_execution_accelerator_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelOptimizationPolicy.ExecutionAccelerators)
}
ModelOptimizationPolicy_ExecutionAccelerators::ModelOptimizationPolicy_ExecutionAccelerators(const ModelOptimizationPolicy_ExecutionAccelerators& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gpu_execution_accelerator_(from.gpu_execution_accelerator_),
      cpu_execution_accelerator_(from.cpu_execution_accelerator_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inference.ModelOptimizationPolicy.ExecutionAccelerators)
}

void ModelOptimizationPolicy_ExecutionAccelerators::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelOptimizationPolicy_ExecutionAccelerators_model_5fconfig_2eproto.base);
}

ModelOptimizationPolicy_ExecutionAccelerators::~ModelOptimizationPolicy_ExecutionAccelerators() {
  // @@protoc_insertion_point(destructor:inference.ModelOptimizationPolicy.ExecutionAccelerators)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelOptimizationPolicy_ExecutionAccelerators::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelOptimizationPolicy_ExecutionAccelerators::ArenaDtor(void* object) {
  ModelOptimizationPolicy_ExecutionAccelerators* _this = reinterpret_cast< ModelOptimizationPolicy_ExecutionAccelerators* >(object);
  (void)_this;
}
void ModelOptimizationPolicy_ExecutionAccelerators::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOptimizationPolicy_ExecutionAccelerators::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOptimizationPolicy_ExecutionAccelerators& ModelOptimizationPolicy_ExecutionAccelerators::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOptimizationPolicy_ExecutionAccelerators_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOptimizationPolicy_ExecutionAccelerators::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelOptimizationPolicy.ExecutionAccelerators)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpu_execution_accelerator_.Clear();
  cpu_execution_accelerator_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelOptimizationPolicy_ExecutionAccelerators::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator gpu_execution_accelerator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gpu_execution_accelerator(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator cpu_execution_accelerator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpu_execution_accelerator(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOptimizationPolicy_ExecutionAccelerators::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelOptimizationPolicy.ExecutionAccelerators)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator gpu_execution_accelerator = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gpu_execution_accelerator_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gpu_execution_accelerator(i), target, stream);
  }

  // repeated .inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator cpu_execution_accelerator = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cpu_execution_accelerator_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cpu_execution_accelerator(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelOptimizationPolicy.ExecutionAccelerators)
  return target;
}

size_t ModelOptimizationPolicy_ExecutionAccelerators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelOptimizationPolicy.ExecutionAccelerators)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator gpu_execution_accelerator = 1;
  total_size += 1UL * this->_internal_gpu_execution_accelerator_size();
  for (const auto& msg : this->gpu_execution_accelerator_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .inference.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator cpu_execution_accelerator = 2;
  total_size += 1UL * this->_internal_cpu_execution_accelerator_size();
  for (const auto& msg : this->cpu_execution_accelerator_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOptimizationPolicy_ExecutionAccelerators::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelOptimizationPolicy.ExecutionAccelerators)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOptimizationPolicy_ExecutionAccelerators* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOptimizationPolicy_ExecutionAccelerators>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelOptimizationPolicy.ExecutionAccelerators)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelOptimizationPolicy.ExecutionAccelerators)
    MergeFrom(*source);
  }
}

void ModelOptimizationPolicy_ExecutionAccelerators::MergeFrom(const ModelOptimizationPolicy_ExecutionAccelerators& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelOptimizationPolicy.ExecutionAccelerators)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gpu_execution_accelerator_.MergeFrom(from.gpu_execution_accelerator_);
  cpu_execution_accelerator_.MergeFrom(from.cpu_execution_accelerator_);
}

void ModelOptimizationPolicy_ExecutionAccelerators::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelOptimizationPolicy.ExecutionAccelerators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOptimizationPolicy_ExecutionAccelerators::CopyFrom(const ModelOptimizationPolicy_ExecutionAccelerators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelOptimizationPolicy.ExecutionAccelerators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOptimizationPolicy_ExecutionAccelerators::IsInitialized() const {
  return true;
}

void ModelOptimizationPolicy_ExecutionAccelerators::InternalSwap(ModelOptimizationPolicy_ExecutionAccelerators* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gpu_execution_accelerator_.InternalSwap(&other->gpu_execution_accelerator_);
  cpu_execution_accelerator_.InternalSwap(&other->cpu_execution_accelerator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy_ExecutionAccelerators::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelOptimizationPolicy_PinnedMemoryBuffer::_Internal {
 public:
};

ModelOptimizationPolicy_PinnedMemoryBuffer::ModelOptimizationPolicy_PinnedMemoryBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
}
ModelOptimizationPolicy_PinnedMemoryBuffer::ModelOptimizationPolicy_PinnedMemoryBuffer(const ModelOptimizationPolicy_PinnedMemoryBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
}

void ModelOptimizationPolicy_PinnedMemoryBuffer::SharedCtor() {
  enable_ = false;
}

ModelOptimizationPolicy_PinnedMemoryBuffer::~ModelOptimizationPolicy_PinnedMemoryBuffer() {
  // @@protoc_insertion_point(destructor:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelOptimizationPolicy_PinnedMemoryBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelOptimizationPolicy_PinnedMemoryBuffer::ArenaDtor(void* object) {
  ModelOptimizationPolicy_PinnedMemoryBuffer* _this = reinterpret_cast< ModelOptimizationPolicy_PinnedMemoryBuffer* >(object);
  (void)_this;
}
void ModelOptimizationPolicy_PinnedMemoryBuffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOptimizationPolicy_PinnedMemoryBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOptimizationPolicy_PinnedMemoryBuffer& ModelOptimizationPolicy_PinnedMemoryBuffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOptimizationPolicy_PinnedMemoryBuffer_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOptimizationPolicy_PinnedMemoryBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelOptimizationPolicy_PinnedMemoryBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOptimizationPolicy_PinnedMemoryBuffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
  return target;
}

size_t ModelOptimizationPolicy_PinnedMemoryBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOptimizationPolicy_PinnedMemoryBuffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOptimizationPolicy_PinnedMemoryBuffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOptimizationPolicy_PinnedMemoryBuffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
    MergeFrom(*source);
  }
}

void ModelOptimizationPolicy_PinnedMemoryBuffer::MergeFrom(const ModelOptimizationPolicy_PinnedMemoryBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void ModelOptimizationPolicy_PinnedMemoryBuffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOptimizationPolicy_PinnedMemoryBuffer::CopyFrom(const ModelOptimizationPolicy_PinnedMemoryBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelOptimizationPolicy.PinnedMemoryBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOptimizationPolicy_PinnedMemoryBuffer::IsInitialized() const {
  return true;
}

void ModelOptimizationPolicy_PinnedMemoryBuffer::InternalSwap(ModelOptimizationPolicy_PinnedMemoryBuffer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy_PinnedMemoryBuffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelOptimizationPolicy::_Internal {
 public:
  static const ::inference::ModelOptimizationPolicy_Graph& graph(const ModelOptimizationPolicy* msg);
  static const ::inference::ModelOptimizationPolicy_Cuda& cuda(const ModelOptimizationPolicy* msg);
  static const ::inference::ModelOptimizationPolicy_ExecutionAccelerators& execution_accelerators(const ModelOptimizationPolicy* msg);
  static const ::inference::ModelOptimizationPolicy_PinnedMemoryBuffer& input_pinned_memory(const ModelOptimizationPolicy* msg);
  static const ::inference::ModelOptimizationPolicy_PinnedMemoryBuffer& output_pinned_memory(const ModelOptimizationPolicy* msg);
};

const ::inference::ModelOptimizationPolicy_Graph&
ModelOptimizationPolicy::_Internal::graph(const ModelOptimizationPolicy* msg) {
  return *msg->graph_;
}
const ::inference::ModelOptimizationPolicy_Cuda&
ModelOptimizationPolicy::_Internal::cuda(const ModelOptimizationPolicy* msg) {
  return *msg->cuda_;
}
const ::inference::ModelOptimizationPolicy_ExecutionAccelerators&
ModelOptimizationPolicy::_Internal::execution_accelerators(const ModelOptimizationPolicy* msg) {
  return *msg->execution_accelerators_;
}
const ::inference::ModelOptimizationPolicy_PinnedMemoryBuffer&
ModelOptimizationPolicy::_Internal::input_pinned_memory(const ModelOptimizationPolicy* msg) {
  return *msg->input_pinned_memory_;
}
const ::inference::ModelOptimizationPolicy_PinnedMemoryBuffer&
ModelOptimizationPolicy::_Internal::output_pinned_memory(const ModelOptimizationPolicy* msg) {
  return *msg->output_pinned_memory_;
}
ModelOptimizationPolicy::ModelOptimizationPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelOptimizationPolicy)
}
ModelOptimizationPolicy::ModelOptimizationPolicy(const ModelOptimizationPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_graph()) {
    graph_ = new ::inference::ModelOptimizationPolicy_Graph(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  if (from._internal_has_cuda()) {
    cuda_ = new ::inference::ModelOptimizationPolicy_Cuda(*from.cuda_);
  } else {
    cuda_ = nullptr;
  }
  if (from._internal_has_execution_accelerators()) {
    execution_accelerators_ = new ::inference::ModelOptimizationPolicy_ExecutionAccelerators(*from.execution_accelerators_);
  } else {
    execution_accelerators_ = nullptr;
  }
  if (from._internal_has_input_pinned_memory()) {
    input_pinned_memory_ = new ::inference::ModelOptimizationPolicy_PinnedMemoryBuffer(*from.input_pinned_memory_);
  } else {
    input_pinned_memory_ = nullptr;
  }
  if (from._internal_has_output_pinned_memory()) {
    output_pinned_memory_ = new ::inference::ModelOptimizationPolicy_PinnedMemoryBuffer(*from.output_pinned_memory_);
  } else {
    output_pinned_memory_ = nullptr;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:inference.ModelOptimizationPolicy)
}

void ModelOptimizationPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelOptimizationPolicy_model_5fconfig_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&graph_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&graph_)) + sizeof(priority_));
}

ModelOptimizationPolicy::~ModelOptimizationPolicy() {
  // @@protoc_insertion_point(destructor:inference.ModelOptimizationPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelOptimizationPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete graph_;
  if (this != internal_default_instance()) delete cuda_;
  if (this != internal_default_instance()) delete execution_accelerators_;
  if (this != internal_default_instance()) delete input_pinned_memory_;
  if (this != internal_default_instance()) delete output_pinned_memory_;
}

void ModelOptimizationPolicy::ArenaDtor(void* object) {
  ModelOptimizationPolicy* _this = reinterpret_cast< ModelOptimizationPolicy* >(object);
  (void)_this;
}
void ModelOptimizationPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOptimizationPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOptimizationPolicy& ModelOptimizationPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOptimizationPolicy_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOptimizationPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelOptimizationPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  if (GetArena() == nullptr && cuda_ != nullptr) {
    delete cuda_;
  }
  cuda_ = nullptr;
  if (GetArena() == nullptr && execution_accelerators_ != nullptr) {
    delete execution_accelerators_;
  }
  execution_accelerators_ = nullptr;
  if (GetArena() == nullptr && input_pinned_memory_ != nullptr) {
    delete input_pinned_memory_;
  }
  input_pinned_memory_ = nullptr;
  if (GetArena() == nullptr && output_pinned_memory_ != nullptr) {
    delete output_pinned_memory_;
  }
  output_pinned_memory_ = nullptr;
  priority_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelOptimizationPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .inference.ModelOptimizationPolicy.Graph graph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelOptimizationPolicy.ModelPriority priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_priority(static_cast<::inference::ModelOptimizationPolicy_ModelPriority>(val));
        } else goto handle_unusual;
        continue;
      // .inference.ModelOptimizationPolicy.Cuda cuda = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cuda(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelOptimizationPolicy.ExecutionAccelerators execution_accelerators = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution_accelerators(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelOptimizationPolicy.PinnedMemoryBuffer input_pinned_memory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_pinned_memory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelOptimizationPolicy.PinnedMemoryBuffer output_pinned_memory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_pinned_memory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOptimizationPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelOptimizationPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .inference.ModelOptimizationPolicy.Graph graph = 1;
  if (this->has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::graph(this), target, stream);
  }

  // .inference.ModelOptimizationPolicy.ModelPriority priority = 2;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_priority(), target);
  }

  // .inference.ModelOptimizationPolicy.Cuda cuda = 3;
  if (this->has_cuda()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cuda(this), target, stream);
  }

  // .inference.ModelOptimizationPolicy.ExecutionAccelerators execution_accelerators = 4;
  if (this->has_execution_accelerators()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::execution_accelerators(this), target, stream);
  }

  // .inference.ModelOptimizationPolicy.PinnedMemoryBuffer input_pinned_memory = 5;
  if (this->has_input_pinned_memory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::input_pinned_memory(this), target, stream);
  }

  // .inference.ModelOptimizationPolicy.PinnedMemoryBuffer output_pinned_memory = 6;
  if (this->has_output_pinned_memory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::output_pinned_memory(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelOptimizationPolicy)
  return target;
}

size_t ModelOptimizationPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelOptimizationPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .inference.ModelOptimizationPolicy.Graph graph = 1;
  if (this->has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  // .inference.ModelOptimizationPolicy.Cuda cuda = 3;
  if (this->has_cuda()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cuda_);
  }

  // .inference.ModelOptimizationPolicy.ExecutionAccelerators execution_accelerators = 4;
  if (this->has_execution_accelerators()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *execution_accelerators_);
  }

  // .inference.ModelOptimizationPolicy.PinnedMemoryBuffer input_pinned_memory = 5;
  if (this->has_input_pinned_memory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_pinned_memory_);
  }

  // .inference.ModelOptimizationPolicy.PinnedMemoryBuffer output_pinned_memory = 6;
  if (this->has_output_pinned_memory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_pinned_memory_);
  }

  // .inference.ModelOptimizationPolicy.ModelPriority priority = 2;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOptimizationPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelOptimizationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOptimizationPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOptimizationPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelOptimizationPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelOptimizationPolicy)
    MergeFrom(*source);
  }
}

void ModelOptimizationPolicy::MergeFrom(const ModelOptimizationPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelOptimizationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_graph()) {
    _internal_mutable_graph()->::inference::ModelOptimizationPolicy_Graph::MergeFrom(from._internal_graph());
  }
  if (from.has_cuda()) {
    _internal_mutable_cuda()->::inference::ModelOptimizationPolicy_Cuda::MergeFrom(from._internal_cuda());
  }
  if (from.has_execution_accelerators()) {
    _internal_mutable_execution_accelerators()->::inference::ModelOptimizationPolicy_ExecutionAccelerators::MergeFrom(from._internal_execution_accelerators());
  }
  if (from.has_input_pinned_memory()) {
    _internal_mutable_input_pinned_memory()->::inference::ModelOptimizationPolicy_PinnedMemoryBuffer::MergeFrom(from._internal_input_pinned_memory());
  }
  if (from.has_output_pinned_memory()) {
    _internal_mutable_output_pinned_memory()->::inference::ModelOptimizationPolicy_PinnedMemoryBuffer::MergeFrom(from._internal_output_pinned_memory());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
}

void ModelOptimizationPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelOptimizationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOptimizationPolicy::CopyFrom(const ModelOptimizationPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelOptimizationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOptimizationPolicy::IsInitialized() const {
  return true;
}

void ModelOptimizationPolicy::InternalSwap(ModelOptimizationPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelOptimizationPolicy, priority_)
      + sizeof(ModelOptimizationPolicy::priority_)
      - PROTOBUF_FIELD_OFFSET(ModelOptimizationPolicy, graph_)>(
          reinterpret_cast<char*>(&graph_),
          reinterpret_cast<char*>(&other->graph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOptimizationPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelQueuePolicy::_Internal {
 public:
};

ModelQueuePolicy::ModelQueuePolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelQueuePolicy)
}
ModelQueuePolicy::ModelQueuePolicy(const ModelQueuePolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&default_timeout_microseconds_, &from.default_timeout_microseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_queue_size_) -
    reinterpret_cast<char*>(&default_timeout_microseconds_)) + sizeof(max_queue_size_));
  // @@protoc_insertion_point(copy_constructor:inference.ModelQueuePolicy)
}

void ModelQueuePolicy::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&default_timeout_microseconds_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_queue_size_) -
      reinterpret_cast<char*>(&default_timeout_microseconds_)) + sizeof(max_queue_size_));
}

ModelQueuePolicy::~ModelQueuePolicy() {
  // @@protoc_insertion_point(destructor:inference.ModelQueuePolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelQueuePolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelQueuePolicy::ArenaDtor(void* object) {
  ModelQueuePolicy* _this = reinterpret_cast< ModelQueuePolicy* >(object);
  (void)_this;
}
void ModelQueuePolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelQueuePolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelQueuePolicy& ModelQueuePolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelQueuePolicy_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelQueuePolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelQueuePolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&default_timeout_microseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_queue_size_) -
      reinterpret_cast<char*>(&default_timeout_microseconds_)) + sizeof(max_queue_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelQueuePolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .inference.ModelQueuePolicy.TimeoutAction timeout_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeout_action(static_cast<::inference::ModelQueuePolicy_TimeoutAction>(val));
        } else goto handle_unusual;
        continue;
      // uint64 default_timeout_microseconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          default_timeout_microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_timeout_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          allow_timeout_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_queue_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelQueuePolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelQueuePolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .inference.ModelQueuePolicy.TimeoutAction timeout_action = 1;
  if (this->timeout_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_timeout_action(), target);
  }

  // uint64 default_timeout_microseconds = 2;
  if (this->default_timeout_microseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_default_timeout_microseconds(), target);
  }

  // bool allow_timeout_override = 3;
  if (this->allow_timeout_override() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_timeout_override(), target);
  }

  // uint32 max_queue_size = 4;
  if (this->max_queue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_queue_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelQueuePolicy)
  return target;
}

size_t ModelQueuePolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelQueuePolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 default_timeout_microseconds = 2;
  if (this->default_timeout_microseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_default_timeout_microseconds());
  }

  // .inference.ModelQueuePolicy.TimeoutAction timeout_action = 1;
  if (this->timeout_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeout_action());
  }

  // bool allow_timeout_override = 3;
  if (this->allow_timeout_override() != 0) {
    total_size += 1 + 1;
  }

  // uint32 max_queue_size = 4;
  if (this->max_queue_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_queue_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelQueuePolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelQueuePolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelQueuePolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelQueuePolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelQueuePolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelQueuePolicy)
    MergeFrom(*source);
  }
}

void ModelQueuePolicy::MergeFrom(const ModelQueuePolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelQueuePolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.default_timeout_microseconds() != 0) {
    _internal_set_default_timeout_microseconds(from._internal_default_timeout_microseconds());
  }
  if (from.timeout_action() != 0) {
    _internal_set_timeout_action(from._internal_timeout_action());
  }
  if (from.allow_timeout_override() != 0) {
    _internal_set_allow_timeout_override(from._internal_allow_timeout_override());
  }
  if (from.max_queue_size() != 0) {
    _internal_set_max_queue_size(from._internal_max_queue_size());
  }
}

void ModelQueuePolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelQueuePolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelQueuePolicy::CopyFrom(const ModelQueuePolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelQueuePolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelQueuePolicy::IsInitialized() const {
  return true;
}

void ModelQueuePolicy::InternalSwap(ModelQueuePolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelQueuePolicy, max_queue_size_)
      + sizeof(ModelQueuePolicy::max_queue_size_)
      - PROTOBUF_FIELD_OFFSET(ModelQueuePolicy, default_timeout_microseconds_)>(
          reinterpret_cast<char*>(&default_timeout_microseconds_),
          reinterpret_cast<char*>(&other->default_timeout_microseconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelQueuePolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse::ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse() {}
ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse::ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse::MergeFrom(const ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ModelDynamicBatching::_Internal {
 public:
  static const ::inference::ModelQueuePolicy& default_queue_policy(const ModelDynamicBatching* msg);
};

const ::inference::ModelQueuePolicy&
ModelDynamicBatching::_Internal::default_queue_policy(const ModelDynamicBatching* msg) {
  return *msg->default_queue_policy_;
}
ModelDynamicBatching::ModelDynamicBatching(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  preferred_batch_size_(arena),
  priority_queue_policy_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelDynamicBatching)
}
ModelDynamicBatching::ModelDynamicBatching(const ModelDynamicBatching& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      preferred_batch_size_(from.preferred_batch_size_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  priority_queue_policy_.MergeFrom(from.priority_queue_policy_);
  if (from._internal_has_default_queue_policy()) {
    default_queue_policy_ = new ::inference::ModelQueuePolicy(*from.default_queue_policy_);
  } else {
    default_queue_policy_ = nullptr;
  }
  ::memcpy(&max_queue_delay_microseconds_, &from.max_queue_delay_microseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_priority_level_) -
    reinterpret_cast<char*>(&max_queue_delay_microseconds_)) + sizeof(default_priority_level_));
  // @@protoc_insertion_point(copy_constructor:inference.ModelDynamicBatching)
}

void ModelDynamicBatching::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelDynamicBatching_model_5fconfig_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&default_queue_policy_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&default_priority_level_) -
      reinterpret_cast<char*>(&default_queue_policy_)) + sizeof(default_priority_level_));
}

ModelDynamicBatching::~ModelDynamicBatching() {
  // @@protoc_insertion_point(destructor:inference.ModelDynamicBatching)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelDynamicBatching::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete default_queue_policy_;
}

void ModelDynamicBatching::ArenaDtor(void* object) {
  ModelDynamicBatching* _this = reinterpret_cast< ModelDynamicBatching* >(object);
  (void)_this;
}
void ModelDynamicBatching::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelDynamicBatching::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelDynamicBatching& ModelDynamicBatching::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelDynamicBatching_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelDynamicBatching::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelDynamicBatching)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preferred_batch_size_.Clear();
  priority_queue_policy_.Clear();
  if (GetArena() == nullptr && default_queue_policy_ != nullptr) {
    delete default_queue_policy_;
  }
  default_queue_policy_ = nullptr;
  ::memset(&max_queue_delay_microseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_priority_level_) -
      reinterpret_cast<char*>(&max_queue_delay_microseconds_)) + sizeof(default_priority_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelDynamicBatching::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 preferred_batch_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_preferred_batch_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_preferred_batch_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_queue_delay_microseconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_queue_delay_microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool preserve_ordering = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          preserve_ordering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 priority_levels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          priority_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 default_priority_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          default_priority_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelQueuePolicy default_queue_policy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_queue_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .inference.ModelQueuePolicy> priority_queue_policy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&priority_queue_policy_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelDynamicBatching::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelDynamicBatching)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 preferred_batch_size = 1;
  {
    int byte_size = _preferred_batch_size_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_preferred_batch_size(), byte_size, target);
    }
  }

  // uint64 max_queue_delay_microseconds = 2;
  if (this->max_queue_delay_microseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_queue_delay_microseconds(), target);
  }

  // bool preserve_ordering = 3;
  if (this->preserve_ordering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_preserve_ordering(), target);
  }

  // uint32 priority_levels = 4;
  if (this->priority_levels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_priority_levels(), target);
  }

  // uint32 default_priority_level = 5;
  if (this->default_priority_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_default_priority_level(), target);
  }

  // .inference.ModelQueuePolicy default_queue_policy = 6;
  if (this->has_default_queue_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::default_queue_policy(this), target, stream);
  }

  // map<uint32, .inference.ModelQueuePolicy> priority_queue_policy = 7;
  if (!this->_internal_priority_queue_policy().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::inference::ModelQueuePolicy >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_priority_queue_policy().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_priority_queue_policy().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::inference::ModelQueuePolicy >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::inference::ModelQueuePolicy >::const_iterator
          it = this->_internal_priority_queue_policy().begin();
          it != this->_internal_priority_queue_policy().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::inference::ModelQueuePolicy >::const_iterator
          it = this->_internal_priority_queue_policy().begin();
          it != this->_internal_priority_queue_policy().end(); ++it) {
        target = ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelDynamicBatching)
  return target;
}

size_t ModelDynamicBatching::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelDynamicBatching)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 preferred_batch_size = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->preferred_batch_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _preferred_batch_size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, .inference.ModelQueuePolicy> priority_queue_policy = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_priority_queue_policy_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::inference::ModelQueuePolicy >::const_iterator
      it = this->_internal_priority_queue_policy().begin();
      it != this->_internal_priority_queue_policy().end(); ++it) {
    total_size += ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .inference.ModelQueuePolicy default_queue_policy = 6;
  if (this->has_default_queue_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_queue_policy_);
  }

  // uint64 max_queue_delay_microseconds = 2;
  if (this->max_queue_delay_microseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_queue_delay_microseconds());
  }

  // bool preserve_ordering = 3;
  if (this->preserve_ordering() != 0) {
    total_size += 1 + 1;
  }

  // uint32 priority_levels = 4;
  if (this->priority_levels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priority_levels());
  }

  // uint32 default_priority_level = 5;
  if (this->default_priority_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_default_priority_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelDynamicBatching::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelDynamicBatching)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelDynamicBatching* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelDynamicBatching>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelDynamicBatching)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelDynamicBatching)
    MergeFrom(*source);
  }
}

void ModelDynamicBatching::MergeFrom(const ModelDynamicBatching& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelDynamicBatching)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  preferred_batch_size_.MergeFrom(from.preferred_batch_size_);
  priority_queue_policy_.MergeFrom(from.priority_queue_policy_);
  if (from.has_default_queue_policy()) {
    _internal_mutable_default_queue_policy()->::inference::ModelQueuePolicy::MergeFrom(from._internal_default_queue_policy());
  }
  if (from.max_queue_delay_microseconds() != 0) {
    _internal_set_max_queue_delay_microseconds(from._internal_max_queue_delay_microseconds());
  }
  if (from.preserve_ordering() != 0) {
    _internal_set_preserve_ordering(from._internal_preserve_ordering());
  }
  if (from.priority_levels() != 0) {
    _internal_set_priority_levels(from._internal_priority_levels());
  }
  if (from.default_priority_level() != 0) {
    _internal_set_default_priority_level(from._internal_default_priority_level());
  }
}

void ModelDynamicBatching::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelDynamicBatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelDynamicBatching::CopyFrom(const ModelDynamicBatching& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelDynamicBatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelDynamicBatching::IsInitialized() const {
  return true;
}

void ModelDynamicBatching::InternalSwap(ModelDynamicBatching* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  preferred_batch_size_.InternalSwap(&other->preferred_batch_size_);
  priority_queue_policy_.Swap(&other->priority_queue_policy_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelDynamicBatching, default_priority_level_)
      + sizeof(ModelDynamicBatching::default_priority_level_)
      - PROTOBUF_FIELD_OFFSET(ModelDynamicBatching, default_queue_policy_)>(
          reinterpret_cast<char*>(&default_queue_policy_),
          reinterpret_cast<char*>(&other->default_queue_policy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelDynamicBatching::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelSequenceBatching_Control::_Internal {
 public:
};

ModelSequenceBatching_Control::ModelSequenceBatching_Control(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  int32_false_true_(arena),
  fp32_false_true_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelSequenceBatching.Control)
}
ModelSequenceBatching_Control::ModelSequenceBatching_Control(const ModelSequenceBatching_Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      int32_false_true_(from.int32_false_true_),
      fp32_false_true_(from.fp32_false_true_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:inference.ModelSequenceBatching.Control)
}

void ModelSequenceBatching_Control::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(data_type_));
}

ModelSequenceBatching_Control::~ModelSequenceBatching_Control() {
  // @@protoc_insertion_point(destructor:inference.ModelSequenceBatching.Control)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelSequenceBatching_Control::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelSequenceBatching_Control::ArenaDtor(void* object) {
  ModelSequenceBatching_Control* _this = reinterpret_cast< ModelSequenceBatching_Control* >(object);
  (void)_this;
}
void ModelSequenceBatching_Control::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelSequenceBatching_Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelSequenceBatching_Control& ModelSequenceBatching_Control::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelSequenceBatching_Control_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelSequenceBatching_Control::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelSequenceBatching.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int32_false_true_.Clear();
  fp32_false_true_.Clear();
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(data_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelSequenceBatching_Control::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .inference.ModelSequenceBatching.Control.Kind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::inference::ModelSequenceBatching_Control_Kind>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 int32_false_true = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32_false_true(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_int32_false_true(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float fp32_false_true = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fp32_false_true(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_fp32_false_true(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .inference.DataType data_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::inference::DataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelSequenceBatching_Control::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelSequenceBatching.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .inference.ModelSequenceBatching.Control.Kind kind = 1;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // repeated int32 int32_false_true = 2;
  {
    int byte_size = _int32_false_true_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_int32_false_true(), byte_size, target);
    }
  }

  // repeated float fp32_false_true = 3;
  if (this->_internal_fp32_false_true_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_fp32_false_true(), target);
  }

  // .inference.DataType data_type = 4;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_data_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelSequenceBatching.Control)
  return target;
}

size_t ModelSequenceBatching_Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelSequenceBatching.Control)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 int32_false_true = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int32_false_true_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int32_false_true_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float fp32_false_true = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fp32_false_true_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fp32_false_true_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .inference.ModelSequenceBatching.Control.Kind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  // .inference.DataType data_type = 4;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelSequenceBatching_Control::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelSequenceBatching.Control)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelSequenceBatching_Control* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelSequenceBatching_Control>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelSequenceBatching.Control)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelSequenceBatching.Control)
    MergeFrom(*source);
  }
}

void ModelSequenceBatching_Control::MergeFrom(const ModelSequenceBatching_Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelSequenceBatching.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  int32_false_true_.MergeFrom(from.int32_false_true_);
  fp32_false_true_.MergeFrom(from.fp32_false_true_);
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
}

void ModelSequenceBatching_Control::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelSequenceBatching.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelSequenceBatching_Control::CopyFrom(const ModelSequenceBatching_Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelSequenceBatching.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelSequenceBatching_Control::IsInitialized() const {
  return true;
}

void ModelSequenceBatching_Control::InternalSwap(ModelSequenceBatching_Control* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  int32_false_true_.InternalSwap(&other->int32_false_true_);
  fp32_false_true_.InternalSwap(&other->fp32_false_true_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelSequenceBatching_Control, data_type_)
      + sizeof(ModelSequenceBatching_Control::data_type_)
      - PROTOBUF_FIELD_OFFSET(ModelSequenceBatching_Control, kind_)>(
          reinterpret_cast<char*>(&kind_),
          reinterpret_cast<char*>(&other->kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelSequenceBatching_Control::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelSequenceBatching_ControlInput::_Internal {
 public:
};

ModelSequenceBatching_ControlInput::ModelSequenceBatching_ControlInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  control_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelSequenceBatching.ControlInput)
}
ModelSequenceBatching_ControlInput::ModelSequenceBatching_ControlInput(const ModelSequenceBatching_ControlInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      control_(from.control_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:inference.ModelSequenceBatching.ControlInput)
}

void ModelSequenceBatching_ControlInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelSequenceBatching_ControlInput_model_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelSequenceBatching_ControlInput::~ModelSequenceBatching_ControlInput() {
  // @@protoc_insertion_point(destructor:inference.ModelSequenceBatching.ControlInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelSequenceBatching_ControlInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelSequenceBatching_ControlInput::ArenaDtor(void* object) {
  ModelSequenceBatching_ControlInput* _this = reinterpret_cast< ModelSequenceBatching_ControlInput* >(object);
  (void)_this;
}
void ModelSequenceBatching_ControlInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelSequenceBatching_ControlInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelSequenceBatching_ControlInput& ModelSequenceBatching_ControlInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelSequenceBatching_ControlInput_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelSequenceBatching_ControlInput::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelSequenceBatching.ControlInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelSequenceBatching_ControlInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelSequenceBatching.ControlInput.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .inference.ModelSequenceBatching.Control control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_control(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelSequenceBatching_ControlInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelSequenceBatching.ControlInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelSequenceBatching.ControlInput.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .inference.ModelSequenceBatching.Control control = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_control_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_control(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelSequenceBatching.ControlInput)
  return target;
}

size_t ModelSequenceBatching_ControlInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelSequenceBatching.ControlInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inference.ModelSequenceBatching.Control control = 2;
  total_size += 1UL * this->_internal_control_size();
  for (const auto& msg : this->control_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelSequenceBatching_ControlInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelSequenceBatching.ControlInput)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelSequenceBatching_ControlInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelSequenceBatching_ControlInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelSequenceBatching.ControlInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelSequenceBatching.ControlInput)
    MergeFrom(*source);
  }
}

void ModelSequenceBatching_ControlInput::MergeFrom(const ModelSequenceBatching_ControlInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelSequenceBatching.ControlInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  control_.MergeFrom(from.control_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void ModelSequenceBatching_ControlInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelSequenceBatching.ControlInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelSequenceBatching_ControlInput::CopyFrom(const ModelSequenceBatching_ControlInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelSequenceBatching.ControlInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelSequenceBatching_ControlInput::IsInitialized() const {
  return true;
}

void ModelSequenceBatching_ControlInput::InternalSwap(ModelSequenceBatching_ControlInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  control_.InternalSwap(&other->control_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelSequenceBatching_ControlInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelSequenceBatching_StrategyDirect::_Internal {
 public:
};

ModelSequenceBatching_StrategyDirect::ModelSequenceBatching_StrategyDirect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelSequenceBatching.StrategyDirect)
}
ModelSequenceBatching_StrategyDirect::ModelSequenceBatching_StrategyDirect(const ModelSequenceBatching_StrategyDirect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_queue_delay_microseconds_, &from.max_queue_delay_microseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&minimum_slot_utilization_) -
    reinterpret_cast<char*>(&max_queue_delay_microseconds_)) + sizeof(minimum_slot_utilization_));
  // @@protoc_insertion_point(copy_constructor:inference.ModelSequenceBatching.StrategyDirect)
}

void ModelSequenceBatching_StrategyDirect::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_queue_delay_microseconds_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&minimum_slot_utilization_) -
      reinterpret_cast<char*>(&max_queue_delay_microseconds_)) + sizeof(minimum_slot_utilization_));
}

ModelSequenceBatching_StrategyDirect::~ModelSequenceBatching_StrategyDirect() {
  // @@protoc_insertion_point(destructor:inference.ModelSequenceBatching.StrategyDirect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelSequenceBatching_StrategyDirect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelSequenceBatching_StrategyDirect::ArenaDtor(void* object) {
  ModelSequenceBatching_StrategyDirect* _this = reinterpret_cast< ModelSequenceBatching_StrategyDirect* >(object);
  (void)_this;
}
void ModelSequenceBatching_StrategyDirect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelSequenceBatching_StrategyDirect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelSequenceBatching_StrategyDirect& ModelSequenceBatching_StrategyDirect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelSequenceBatching_StrategyDirect_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelSequenceBatching_StrategyDirect::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelSequenceBatching.StrategyDirect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_queue_delay_microseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minimum_slot_utilization_) -
      reinterpret_cast<char*>(&max_queue_delay_microseconds_)) + sizeof(minimum_slot_utilization_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelSequenceBatching_StrategyDirect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 max_queue_delay_microseconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_queue_delay_microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float minimum_slot_utilization = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          minimum_slot_utilization_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelSequenceBatching_StrategyDirect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelSequenceBatching.StrategyDirect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 max_queue_delay_microseconds = 1;
  if (this->max_queue_delay_microseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_max_queue_delay_microseconds(), target);
  }

  // float minimum_slot_utilization = 2;
  if (!(this->minimum_slot_utilization() <= 0 && this->minimum_slot_utilization() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_minimum_slot_utilization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelSequenceBatching.StrategyDirect)
  return target;
}

size_t ModelSequenceBatching_StrategyDirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelSequenceBatching.StrategyDirect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 max_queue_delay_microseconds = 1;
  if (this->max_queue_delay_microseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_queue_delay_microseconds());
  }

  // float minimum_slot_utilization = 2;
  if (!(this->minimum_slot_utilization() <= 0 && this->minimum_slot_utilization() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelSequenceBatching_StrategyDirect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelSequenceBatching.StrategyDirect)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelSequenceBatching_StrategyDirect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelSequenceBatching_StrategyDirect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelSequenceBatching.StrategyDirect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelSequenceBatching.StrategyDirect)
    MergeFrom(*source);
  }
}

void ModelSequenceBatching_StrategyDirect::MergeFrom(const ModelSequenceBatching_StrategyDirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelSequenceBatching.StrategyDirect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_queue_delay_microseconds() != 0) {
    _internal_set_max_queue_delay_microseconds(from._internal_max_queue_delay_microseconds());
  }
  if (!(from.minimum_slot_utilization() <= 0 && from.minimum_slot_utilization() >= 0)) {
    _internal_set_minimum_slot_utilization(from._internal_minimum_slot_utilization());
  }
}

void ModelSequenceBatching_StrategyDirect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelSequenceBatching.StrategyDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelSequenceBatching_StrategyDirect::CopyFrom(const ModelSequenceBatching_StrategyDirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelSequenceBatching.StrategyDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelSequenceBatching_StrategyDirect::IsInitialized() const {
  return true;
}

void ModelSequenceBatching_StrategyDirect::InternalSwap(ModelSequenceBatching_StrategyDirect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelSequenceBatching_StrategyDirect, minimum_slot_utilization_)
      + sizeof(ModelSequenceBatching_StrategyDirect::minimum_slot_utilization_)
      - PROTOBUF_FIELD_OFFSET(ModelSequenceBatching_StrategyDirect, max_queue_delay_microseconds_)>(
          reinterpret_cast<char*>(&max_queue_delay_microseconds_),
          reinterpret_cast<char*>(&other->max_queue_delay_microseconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelSequenceBatching_StrategyDirect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelSequenceBatching_StrategyOldest::_Internal {
 public:
};

ModelSequenceBatching_StrategyOldest::ModelSequenceBatching_StrategyOldest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  preferred_batch_size_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelSequenceBatching.StrategyOldest)
}
ModelSequenceBatching_StrategyOldest::ModelSequenceBatching_StrategyOldest(const ModelSequenceBatching_StrategyOldest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      preferred_batch_size_(from.preferred_batch_size_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_queue_delay_microseconds_, &from.max_queue_delay_microseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_candidate_sequences_) -
    reinterpret_cast<char*>(&max_queue_delay_microseconds_)) + sizeof(max_candidate_sequences_));
  // @@protoc_insertion_point(copy_constructor:inference.ModelSequenceBatching.StrategyOldest)
}

void ModelSequenceBatching_StrategyOldest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_queue_delay_microseconds_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_candidate_sequences_) -
      reinterpret_cast<char*>(&max_queue_delay_microseconds_)) + sizeof(max_candidate_sequences_));
}

ModelSequenceBatching_StrategyOldest::~ModelSequenceBatching_StrategyOldest() {
  // @@protoc_insertion_point(destructor:inference.ModelSequenceBatching.StrategyOldest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelSequenceBatching_StrategyOldest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelSequenceBatching_StrategyOldest::ArenaDtor(void* object) {
  ModelSequenceBatching_StrategyOldest* _this = reinterpret_cast< ModelSequenceBatching_StrategyOldest* >(object);
  (void)_this;
}
void ModelSequenceBatching_StrategyOldest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelSequenceBatching_StrategyOldest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelSequenceBatching_StrategyOldest& ModelSequenceBatching_StrategyOldest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelSequenceBatching_StrategyOldest_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelSequenceBatching_StrategyOldest::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelSequenceBatching.StrategyOldest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preferred_batch_size_.Clear();
  ::memset(&max_queue_delay_microseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_candidate_sequences_) -
      reinterpret_cast<char*>(&max_queue_delay_microseconds_)) + sizeof(max_candidate_sequences_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelSequenceBatching_StrategyOldest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_candidate_sequences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_candidate_sequences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 preferred_batch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_preferred_batch_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_preferred_batch_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_queue_delay_microseconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_queue_delay_microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelSequenceBatching_StrategyOldest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelSequenceBatching.StrategyOldest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_candidate_sequences = 1;
  if (this->max_candidate_sequences() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_candidate_sequences(), target);
  }

  // repeated int32 preferred_batch_size = 2;
  {
    int byte_size = _preferred_batch_size_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_preferred_batch_size(), byte_size, target);
    }
  }

  // uint64 max_queue_delay_microseconds = 3;
  if (this->max_queue_delay_microseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_queue_delay_microseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelSequenceBatching.StrategyOldest)
  return target;
}

size_t ModelSequenceBatching_StrategyOldest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelSequenceBatching.StrategyOldest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 preferred_batch_size = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->preferred_batch_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _preferred_batch_size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 max_queue_delay_microseconds = 3;
  if (this->max_queue_delay_microseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_queue_delay_microseconds());
  }

  // int32 max_candidate_sequences = 1;
  if (this->max_candidate_sequences() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_candidate_sequences());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelSequenceBatching_StrategyOldest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelSequenceBatching.StrategyOldest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelSequenceBatching_StrategyOldest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelSequenceBatching_StrategyOldest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelSequenceBatching.StrategyOldest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelSequenceBatching.StrategyOldest)
    MergeFrom(*source);
  }
}

void ModelSequenceBatching_StrategyOldest::MergeFrom(const ModelSequenceBatching_StrategyOldest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelSequenceBatching.StrategyOldest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  preferred_batch_size_.MergeFrom(from.preferred_batch_size_);
  if (from.max_queue_delay_microseconds() != 0) {
    _internal_set_max_queue_delay_microseconds(from._internal_max_queue_delay_microseconds());
  }
  if (from.max_candidate_sequences() != 0) {
    _internal_set_max_candidate_sequences(from._internal_max_candidate_sequences());
  }
}

void ModelSequenceBatching_StrategyOldest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelSequenceBatching.StrategyOldest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelSequenceBatching_StrategyOldest::CopyFrom(const ModelSequenceBatching_StrategyOldest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelSequenceBatching.StrategyOldest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelSequenceBatching_StrategyOldest::IsInitialized() const {
  return true;
}

void ModelSequenceBatching_StrategyOldest::InternalSwap(ModelSequenceBatching_StrategyOldest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  preferred_batch_size_.InternalSwap(&other->preferred_batch_size_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelSequenceBatching_StrategyOldest, max_candidate_sequences_)
      + sizeof(ModelSequenceBatching_StrategyOldest::max_candidate_sequences_)
      - PROTOBUF_FIELD_OFFSET(ModelSequenceBatching_StrategyOldest, max_queue_delay_microseconds_)>(
          reinterpret_cast<char*>(&max_queue_delay_microseconds_),
          reinterpret_cast<char*>(&other->max_queue_delay_microseconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelSequenceBatching_StrategyOldest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelSequenceBatching::_Internal {
 public:
  static const ::inference::ModelSequenceBatching_StrategyDirect& direct(const ModelSequenceBatching* msg);
  static const ::inference::ModelSequenceBatching_StrategyOldest& oldest(const ModelSequenceBatching* msg);
};

const ::inference::ModelSequenceBatching_StrategyDirect&
ModelSequenceBatching::_Internal::direct(const ModelSequenceBatching* msg) {
  return *msg->strategy_choice_.direct_;
}
const ::inference::ModelSequenceBatching_StrategyOldest&
ModelSequenceBatching::_Internal::oldest(const ModelSequenceBatching* msg) {
  return *msg->strategy_choice_.oldest_;
}
void ModelSequenceBatching::set_allocated_direct(::inference::ModelSequenceBatching_StrategyDirect* direct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_strategy_choice();
  if (direct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direct);
    if (message_arena != submessage_arena) {
      direct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct, submessage_arena);
    }
    set_has_direct();
    strategy_choice_.direct_ = direct;
  }
  // @@protoc_insertion_point(field_set_allocated:inference.ModelSequenceBatching.direct)
}
void ModelSequenceBatching::set_allocated_oldest(::inference::ModelSequenceBatching_StrategyOldest* oldest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_strategy_choice();
  if (oldest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oldest);
    if (message_arena != submessage_arena) {
      oldest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldest, submessage_arena);
    }
    set_has_oldest();
    strategy_choice_.oldest_ = oldest;
  }
  // @@protoc_insertion_point(field_set_allocated:inference.ModelSequenceBatching.oldest)
}
ModelSequenceBatching::ModelSequenceBatching(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  control_input_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelSequenceBatching)
}
ModelSequenceBatching::ModelSequenceBatching(const ModelSequenceBatching& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      control_input_(from.control_input_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_sequence_idle_microseconds_ = from.max_sequence_idle_microseconds_;
  clear_has_strategy_choice();
  switch (from.strategy_choice_case()) {
    case kDirect: {
      _internal_mutable_direct()->::inference::ModelSequenceBatching_StrategyDirect::MergeFrom(from._internal_direct());
      break;
    }
    case kOldest: {
      _internal_mutable_oldest()->::inference::ModelSequenceBatching_StrategyOldest::MergeFrom(from._internal_oldest());
      break;
    }
    case STRATEGY_CHOICE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inference.ModelSequenceBatching)
}

void ModelSequenceBatching::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelSequenceBatching_model_5fconfig_2eproto.base);
  max_sequence_idle_microseconds_ = PROTOBUF_ULONGLONG(0);
  clear_has_strategy_choice();
}

ModelSequenceBatching::~ModelSequenceBatching() {
  // @@protoc_insertion_point(destructor:inference.ModelSequenceBatching)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelSequenceBatching::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_strategy_choice()) {
    clear_strategy_choice();
  }
}

void ModelSequenceBatching::ArenaDtor(void* object) {
  ModelSequenceBatching* _this = reinterpret_cast< ModelSequenceBatching* >(object);
  (void)_this;
}
void ModelSequenceBatching::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelSequenceBatching::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelSequenceBatching& ModelSequenceBatching::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelSequenceBatching_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelSequenceBatching::clear_strategy_choice() {
// @@protoc_insertion_point(one_of_clear_start:inference.ModelSequenceBatching)
  switch (strategy_choice_case()) {
    case kDirect: {
      if (GetArena() == nullptr) {
        delete strategy_choice_.direct_;
      }
      break;
    }
    case kOldest: {
      if (GetArena() == nullptr) {
        delete strategy_choice_.oldest_;
      }
      break;
    }
    case STRATEGY_CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STRATEGY_CHOICE_NOT_SET;
}


void ModelSequenceBatching::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelSequenceBatching)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_input_.Clear();
  max_sequence_idle_microseconds_ = PROTOBUF_ULONGLONG(0);
  clear_strategy_choice();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelSequenceBatching::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 max_sequence_idle_microseconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_sequence_idle_microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .inference.ModelSequenceBatching.ControlInput control_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_control_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .inference.ModelSequenceBatching.StrategyDirect direct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelSequenceBatching.StrategyOldest oldest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelSequenceBatching::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelSequenceBatching)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 max_sequence_idle_microseconds = 1;
  if (this->max_sequence_idle_microseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_max_sequence_idle_microseconds(), target);
  }

  // repeated .inference.ModelSequenceBatching.ControlInput control_input = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_control_input_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_control_input(i), target, stream);
  }

  // .inference.ModelSequenceBatching.StrategyDirect direct = 3;
  if (_internal_has_direct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::direct(this), target, stream);
  }

  // .inference.ModelSequenceBatching.StrategyOldest oldest = 4;
  if (_internal_has_oldest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::oldest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelSequenceBatching)
  return target;
}

size_t ModelSequenceBatching::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelSequenceBatching)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inference.ModelSequenceBatching.ControlInput control_input = 2;
  total_size += 1UL * this->_internal_control_input_size();
  for (const auto& msg : this->control_input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 max_sequence_idle_microseconds = 1;
  if (this->max_sequence_idle_microseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_sequence_idle_microseconds());
  }

  switch (strategy_choice_case()) {
    // .inference.ModelSequenceBatching.StrategyDirect direct = 3;
    case kDirect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_choice_.direct_);
      break;
    }
    // .inference.ModelSequenceBatching.StrategyOldest oldest = 4;
    case kOldest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_choice_.oldest_);
      break;
    }
    case STRATEGY_CHOICE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelSequenceBatching::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelSequenceBatching)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelSequenceBatching* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelSequenceBatching>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelSequenceBatching)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelSequenceBatching)
    MergeFrom(*source);
  }
}

void ModelSequenceBatching::MergeFrom(const ModelSequenceBatching& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelSequenceBatching)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  control_input_.MergeFrom(from.control_input_);
  if (from.max_sequence_idle_microseconds() != 0) {
    _internal_set_max_sequence_idle_microseconds(from._internal_max_sequence_idle_microseconds());
  }
  switch (from.strategy_choice_case()) {
    case kDirect: {
      _internal_mutable_direct()->::inference::ModelSequenceBatching_StrategyDirect::MergeFrom(from._internal_direct());
      break;
    }
    case kOldest: {
      _internal_mutable_oldest()->::inference::ModelSequenceBatching_StrategyOldest::MergeFrom(from._internal_oldest());
      break;
    }
    case STRATEGY_CHOICE_NOT_SET: {
      break;
    }
  }
}

void ModelSequenceBatching::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelSequenceBatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelSequenceBatching::CopyFrom(const ModelSequenceBatching& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelSequenceBatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelSequenceBatching::IsInitialized() const {
  return true;
}

void ModelSequenceBatching::InternalSwap(ModelSequenceBatching* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  control_input_.InternalSwap(&other->control_input_);
  swap(max_sequence_idle_microseconds_, other->max_sequence_idle_microseconds_);
  swap(strategy_choice_, other->strategy_choice_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelSequenceBatching::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ModelEnsembling_Step_InputMapEntry_DoNotUse::ModelEnsembling_Step_InputMapEntry_DoNotUse() {}
ModelEnsembling_Step_InputMapEntry_DoNotUse::ModelEnsembling_Step_InputMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelEnsembling_Step_InputMapEntry_DoNotUse::MergeFrom(const ModelEnsembling_Step_InputMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelEnsembling_Step_InputMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelEnsembling_Step_InputMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ModelEnsembling_Step_OutputMapEntry_DoNotUse::ModelEnsembling_Step_OutputMapEntry_DoNotUse() {}
ModelEnsembling_Step_OutputMapEntry_DoNotUse::ModelEnsembling_Step_OutputMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelEnsembling_Step_OutputMapEntry_DoNotUse::MergeFrom(const ModelEnsembling_Step_OutputMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelEnsembling_Step_OutputMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelEnsembling_Step_OutputMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ModelEnsembling_Step::_Internal {
 public:
};

ModelEnsembling_Step::ModelEnsembling_Step(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_map_(arena),
  output_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelEnsembling.Step)
}
ModelEnsembling_Step::ModelEnsembling_Step(const ModelEnsembling_Step& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_map_.MergeFrom(from.input_map_);
  output_map_.MergeFrom(from.output_map_);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_name().empty()) {
    model_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_name(), 
      GetArena());
  }
  model_version_ = from.model_version_;
  // @@protoc_insertion_point(copy_constructor:inference.ModelEnsembling.Step)
}

void ModelEnsembling_Step::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelEnsembling_Step_model_5fconfig_2eproto.base);
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_ = PROTOBUF_LONGLONG(0);
}

ModelEnsembling_Step::~ModelEnsembling_Step() {
  // @@protoc_insertion_point(destructor:inference.ModelEnsembling.Step)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelEnsembling_Step::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelEnsembling_Step::ArenaDtor(void* object) {
  ModelEnsembling_Step* _this = reinterpret_cast< ModelEnsembling_Step* >(object);
  (void)_this;
}
void ModelEnsembling_Step::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelEnsembling_Step::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelEnsembling_Step& ModelEnsembling_Step::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelEnsembling_Step_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelEnsembling_Step::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelEnsembling.Step)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_map_.Clear();
  output_map_.Clear();
  model_name_.ClearToEmpty();
  model_version_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelEnsembling_Step::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelEnsembling.Step.model_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 model_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          model_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> input_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&input_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> output_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&output_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelEnsembling_Step::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelEnsembling.Step)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelEnsembling.Step.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // int64 model_version = 2;
  if (this->model_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_model_version(), target);
  }

  // map<string, string> input_map = 3;
  if (!this->_internal_input_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelEnsembling.Step.InputMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelEnsembling.Step.InputMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_input_map().begin();
          it != this->_internal_input_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelEnsembling_Step_InputMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_input_map().begin();
          it != this->_internal_input_map().end(); ++it) {
        target = ModelEnsembling_Step_InputMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> output_map = 4;
  if (!this->_internal_output_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelEnsembling.Step.OutputMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelEnsembling.Step.OutputMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_output_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_output_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_output_map().begin();
          it != this->_internal_output_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelEnsembling_Step_OutputMapEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_output_map().begin();
          it != this->_internal_output_map().end(); ++it) {
        target = ModelEnsembling_Step_OutputMapEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelEnsembling.Step)
  return target;
}

size_t ModelEnsembling_Step::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelEnsembling.Step)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> input_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_input_map().begin();
      it != this->_internal_input_map().end(); ++it) {
    total_size += ModelEnsembling_Step_InputMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> output_map = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_output_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_output_map().begin();
      it != this->_internal_output_map().end(); ++it) {
    total_size += ModelEnsembling_Step_OutputMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string model_name = 1;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // int64 model_version = 2;
  if (this->model_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_model_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelEnsembling_Step::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelEnsembling.Step)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelEnsembling_Step* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelEnsembling_Step>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelEnsembling.Step)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelEnsembling.Step)
    MergeFrom(*source);
  }
}

void ModelEnsembling_Step::MergeFrom(const ModelEnsembling_Step& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelEnsembling.Step)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_map_.MergeFrom(from.input_map_);
  output_map_.MergeFrom(from.output_map_);
  if (from.model_name().size() > 0) {
    _internal_set_model_name(from._internal_model_name());
  }
  if (from.model_version() != 0) {
    _internal_set_model_version(from._internal_model_version());
  }
}

void ModelEnsembling_Step::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelEnsembling.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelEnsembling_Step::CopyFrom(const ModelEnsembling_Step& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelEnsembling.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelEnsembling_Step::IsInitialized() const {
  return true;
}

void ModelEnsembling_Step::InternalSwap(ModelEnsembling_Step* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_map_.Swap(&other->input_map_);
  output_map_.Swap(&other->output_map_);
  model_name_.Swap(&other->model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(model_version_, other->model_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelEnsembling_Step::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelEnsembling::_Internal {
 public:
};

ModelEnsembling::ModelEnsembling(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  step_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelEnsembling)
}
ModelEnsembling::ModelEnsembling(const ModelEnsembling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      step_(from.step_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inference.ModelEnsembling)
}

void ModelEnsembling::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelEnsembling_model_5fconfig_2eproto.base);
}

ModelEnsembling::~ModelEnsembling() {
  // @@protoc_insertion_point(destructor:inference.ModelEnsembling)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelEnsembling::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelEnsembling::ArenaDtor(void* object) {
  ModelEnsembling* _this = reinterpret_cast< ModelEnsembling* >(object);
  (void)_this;
}
void ModelEnsembling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelEnsembling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelEnsembling& ModelEnsembling::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelEnsembling_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelEnsembling::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelEnsembling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  step_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelEnsembling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .inference.ModelEnsembling.Step step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_step(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelEnsembling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelEnsembling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .inference.ModelEnsembling.Step step = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_step_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_step(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelEnsembling)
  return target;
}

size_t ModelEnsembling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelEnsembling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inference.ModelEnsembling.Step step = 1;
  total_size += 1UL * this->_internal_step_size();
  for (const auto& msg : this->step_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelEnsembling::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelEnsembling)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelEnsembling* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelEnsembling>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelEnsembling)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelEnsembling)
    MergeFrom(*source);
  }
}

void ModelEnsembling::MergeFrom(const ModelEnsembling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelEnsembling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  step_.MergeFrom(from.step_);
}

void ModelEnsembling::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelEnsembling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelEnsembling::CopyFrom(const ModelEnsembling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelEnsembling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelEnsembling::IsInitialized() const {
  return true;
}

void ModelEnsembling::InternalSwap(ModelEnsembling* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  step_.InternalSwap(&other->step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelEnsembling::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelParameter::_Internal {
 public:
};

ModelParameter::ModelParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelParameter)
}
ModelParameter::ModelParameter(const ModelParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_string_value().empty()) {
    string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:inference.ModelParameter)
}

void ModelParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelParameter_model_5fconfig_2eproto.base);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelParameter::~ModelParameter() {
  // @@protoc_insertion_point(destructor:inference.ModelParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelParameter::ArenaDtor(void* object) {
  ModelParameter* _this = reinterpret_cast< ModelParameter* >(object);
  (void)_this;
}
void ModelParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelParameter& ModelParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelParameter_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelParameter.string_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (this->string_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelParameter.string_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelParameter)
  return target;
}

size_t ModelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string string_value = 1;
  if (this->string_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelParameter)
    MergeFrom(*source);
  }
}

void ModelParameter::MergeFrom(const ModelParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.string_value().size() > 0) {
    _internal_set_string_value(from._internal_string_value());
  }
}

void ModelParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelParameter::CopyFrom(const ModelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelParameter::IsInitialized() const {
  return true;
}

void ModelParameter::InternalSwap(ModelParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  string_value_.Swap(&other->string_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelWarmup_Input::_Internal {
 public:
};

ModelWarmup_Input::ModelWarmup_Input(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dims_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelWarmup.Input)
}
ModelWarmup_Input::ModelWarmup_Input(const ModelWarmup_Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_type_ = from.data_type_;
  clear_has_input_data_type();
  switch (from.input_data_type_case()) {
    case kZeroData: {
      _internal_set_zero_data(from._internal_zero_data());
      break;
    }
    case kRandomData: {
      _internal_set_random_data(from._internal_random_data());
      break;
    }
    case kInputDataFile: {
      _internal_set_input_data_file(from._internal_input_data_file());
      break;
    }
    case INPUT_DATA_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inference.ModelWarmup.Input)
}

void ModelWarmup_Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelWarmup_Input_model_5fconfig_2eproto.base);
  data_type_ = 0;
  clear_has_input_data_type();
}

ModelWarmup_Input::~ModelWarmup_Input() {
  // @@protoc_insertion_point(destructor:inference.ModelWarmup.Input)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelWarmup_Input::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_input_data_type()) {
    clear_input_data_type();
  }
}

void ModelWarmup_Input::ArenaDtor(void* object) {
  ModelWarmup_Input* _this = reinterpret_cast< ModelWarmup_Input* >(object);
  (void)_this;
}
void ModelWarmup_Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelWarmup_Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelWarmup_Input& ModelWarmup_Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelWarmup_Input_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelWarmup_Input::clear_input_data_type() {
// @@protoc_insertion_point(one_of_clear_start:inference.ModelWarmup.Input)
  switch (input_data_type_case()) {
    case kZeroData: {
      // No need to clear
      break;
    }
    case kRandomData: {
      // No need to clear
      break;
    }
    case kInputDataFile: {
      input_data_type_.input_data_file_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case INPUT_DATA_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INPUT_DATA_TYPE_NOT_SET;
}


void ModelWarmup_Input::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelWarmup.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  data_type_ = 0;
  clear_input_data_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelWarmup_Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .inference.DataType data_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::inference::DataType>(val));
        } else goto handle_unusual;
        continue;
      // repeated int64 dims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool zero_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_zero_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool random_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_random_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_data_file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_input_data_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelWarmup.Input.input_data_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelWarmup_Input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelWarmup.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .inference.DataType data_type = 1;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_data_type(), target);
  }

  // repeated int64 dims = 2;
  {
    int byte_size = _dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_dims(), byte_size, target);
    }
  }

  // bool zero_data = 3;
  if (_internal_has_zero_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_zero_data(), target);
  }

  // bool random_data = 4;
  if (_internal_has_random_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_random_data(), target);
  }

  // string input_data_file = 5;
  if (_internal_has_input_data_file()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_data_file().data(), static_cast<int>(this->_internal_input_data_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelWarmup.Input.input_data_file");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_input_data_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelWarmup.Input)
  return target;
}

size_t ModelWarmup_Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelWarmup.Input)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .inference.DataType data_type = 1;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  switch (input_data_type_case()) {
    // bool zero_data = 3;
    case kZeroData: {
      total_size += 1 + 1;
      break;
    }
    // bool random_data = 4;
    case kRandomData: {
      total_size += 1 + 1;
      break;
    }
    // string input_data_file = 5;
    case kInputDataFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_data_file());
      break;
    }
    case INPUT_DATA_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelWarmup_Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelWarmup.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelWarmup_Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelWarmup_Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelWarmup.Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelWarmup.Input)
    MergeFrom(*source);
  }
}

void ModelWarmup_Input::MergeFrom(const ModelWarmup_Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelWarmup.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  switch (from.input_data_type_case()) {
    case kZeroData: {
      _internal_set_zero_data(from._internal_zero_data());
      break;
    }
    case kRandomData: {
      _internal_set_random_data(from._internal_random_data());
      break;
    }
    case kInputDataFile: {
      _internal_set_input_data_file(from._internal_input_data_file());
      break;
    }
    case INPUT_DATA_TYPE_NOT_SET: {
      break;
    }
  }
}

void ModelWarmup_Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelWarmup.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelWarmup_Input::CopyFrom(const ModelWarmup_Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelWarmup.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelWarmup_Input::IsInitialized() const {
  return true;
}

void ModelWarmup_Input::InternalSwap(ModelWarmup_Input* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dims_.InternalSwap(&other->dims_);
  swap(data_type_, other->data_type_);
  swap(input_data_type_, other->input_data_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelWarmup_Input::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ModelWarmup_InputsEntry_DoNotUse::ModelWarmup_InputsEntry_DoNotUse() {}
ModelWarmup_InputsEntry_DoNotUse::ModelWarmup_InputsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelWarmup_InputsEntry_DoNotUse::MergeFrom(const ModelWarmup_InputsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelWarmup_InputsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelWarmup_InputsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ModelWarmup::_Internal {
 public:
};

ModelWarmup::ModelWarmup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelWarmup)
}
ModelWarmup::ModelWarmup(const ModelWarmup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inputs_.MergeFrom(from.inputs_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  batch_size_ = from.batch_size_;
  // @@protoc_insertion_point(copy_constructor:inference.ModelWarmup)
}

void ModelWarmup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelWarmup_model_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0u;
}

ModelWarmup::~ModelWarmup() {
  // @@protoc_insertion_point(destructor:inference.ModelWarmup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelWarmup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelWarmup::ArenaDtor(void* object) {
  ModelWarmup* _this = reinterpret_cast< ModelWarmup* >(object);
  (void)_this;
}
void ModelWarmup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelWarmup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelWarmup& ModelWarmup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelWarmup_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelWarmup::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelWarmup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  name_.ClearToEmpty();
  batch_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelWarmup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelWarmup.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 batch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .inference.ModelWarmup.Input> inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&inputs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelWarmup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelWarmup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelWarmup.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 batch_size = 2;
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_batch_size(), target);
  }

  // map<string, .inference.ModelWarmup.Input> inputs = 3;
  if (!this->_internal_inputs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelWarmup_Input >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelWarmup.InputsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_inputs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_inputs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelWarmup_Input >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelWarmup_Input >::const_iterator
          it = this->_internal_inputs().begin();
          it != this->_internal_inputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelWarmup_InputsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelWarmup_Input >::const_iterator
          it = this->_internal_inputs().begin();
          it != this->_internal_inputs().end(); ++it) {
        target = ModelWarmup_InputsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelWarmup)
  return target;
}

size_t ModelWarmup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelWarmup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .inference.ModelWarmup.Input> inputs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_inputs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelWarmup_Input >::const_iterator
      it = this->_internal_inputs().begin();
      it != this->_internal_inputs().end(); ++it) {
    total_size += ModelWarmup_InputsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 batch_size = 2;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelWarmup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelWarmup)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelWarmup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelWarmup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelWarmup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelWarmup)
    MergeFrom(*source);
  }
}

void ModelWarmup::MergeFrom(const ModelWarmup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelWarmup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
}

void ModelWarmup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelWarmup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelWarmup::CopyFrom(const ModelWarmup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelWarmup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelWarmup::IsInitialized() const {
  return true;
}

void ModelWarmup::InternalSwap(ModelWarmup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.Swap(&other->inputs_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(batch_size_, other->batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelWarmup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelOperations::_Internal {
 public:
};

ModelOperations::ModelOperations(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  op_library_filename_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelOperations)
}
ModelOperations::ModelOperations(const ModelOperations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      op_library_filename_(from.op_library_filename_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:inference.ModelOperations)
}

void ModelOperations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelOperations_model_5fconfig_2eproto.base);
}

ModelOperations::~ModelOperations() {
  // @@protoc_insertion_point(destructor:inference.ModelOperations)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelOperations::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelOperations::ArenaDtor(void* object) {
  ModelOperations* _this = reinterpret_cast< ModelOperations* >(object);
  (void)_this;
}
void ModelOperations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOperations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOperations& ModelOperations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOperations_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOperations::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_library_filename_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelOperations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string op_library_filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_op_library_filename();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelOperations.op_library_filename"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOperations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string op_library_filename = 1;
  for (int i = 0, n = this->_internal_op_library_filename_size(); i < n; i++) {
    const auto& s = this->_internal_op_library_filename(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelOperations.op_library_filename");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelOperations)
  return target;
}

size_t ModelOperations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelOperations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string op_library_filename = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(op_library_filename_.size());
  for (int i = 0, n = op_library_filename_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      op_library_filename_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOperations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelOperations)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOperations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOperations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelOperations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelOperations)
    MergeFrom(*source);
  }
}

void ModelOperations::MergeFrom(const ModelOperations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelOperations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  op_library_filename_.MergeFrom(from.op_library_filename_);
}

void ModelOperations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOperations::CopyFrom(const ModelOperations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOperations::IsInitialized() const {
  return true;
}

void ModelOperations::InternalSwap(ModelOperations* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  op_library_filename_.InternalSwap(&other->op_library_filename_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOperations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModelTransactionPolicy::_Internal {
 public:
};

ModelTransactionPolicy::ModelTransactionPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelTransactionPolicy)
}
ModelTransactionPolicy::ModelTransactionPolicy(const ModelTransactionPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  decoupled_ = from.decoupled_;
  // @@protoc_insertion_point(copy_constructor:inference.ModelTransactionPolicy)
}

void ModelTransactionPolicy::SharedCtor() {
  decoupled_ = false;
}

ModelTransactionPolicy::~ModelTransactionPolicy() {
  // @@protoc_insertion_point(destructor:inference.ModelTransactionPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelTransactionPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelTransactionPolicy::ArenaDtor(void* object) {
  ModelTransactionPolicy* _this = reinterpret_cast< ModelTransactionPolicy* >(object);
  (void)_this;
}
void ModelTransactionPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelTransactionPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelTransactionPolicy& ModelTransactionPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelTransactionPolicy_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelTransactionPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelTransactionPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decoupled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelTransactionPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool decoupled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          decoupled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelTransactionPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelTransactionPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool decoupled = 1;
  if (this->decoupled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_decoupled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelTransactionPolicy)
  return target;
}

size_t ModelTransactionPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelTransactionPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool decoupled = 1;
  if (this->decoupled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelTransactionPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelTransactionPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelTransactionPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelTransactionPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelTransactionPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelTransactionPolicy)
    MergeFrom(*source);
  }
}

void ModelTransactionPolicy::MergeFrom(const ModelTransactionPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelTransactionPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.decoupled() != 0) {
    _internal_set_decoupled(from._internal_decoupled());
  }
}

void ModelTransactionPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelTransactionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelTransactionPolicy::CopyFrom(const ModelTransactionPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelTransactionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTransactionPolicy::IsInitialized() const {
  return true;
}

void ModelTransactionPolicy::InternalSwap(ModelTransactionPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(decoupled_, other->decoupled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelTransactionPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ModelConfig_CcModelFilenamesEntry_DoNotUse::ModelConfig_CcModelFilenamesEntry_DoNotUse() {}
ModelConfig_CcModelFilenamesEntry_DoNotUse::ModelConfig_CcModelFilenamesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelConfig_CcModelFilenamesEntry_DoNotUse::MergeFrom(const ModelConfig_CcModelFilenamesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelConfig_CcModelFilenamesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelConfig_CcModelFilenamesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ModelConfig_MetricTagsEntry_DoNotUse::ModelConfig_MetricTagsEntry_DoNotUse() {}
ModelConfig_MetricTagsEntry_DoNotUse::ModelConfig_MetricTagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelConfig_MetricTagsEntry_DoNotUse::MergeFrom(const ModelConfig_MetricTagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelConfig_MetricTagsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelConfig_MetricTagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ModelConfig_ParametersEntry_DoNotUse::ModelConfig_ParametersEntry_DoNotUse() {}
ModelConfig_ParametersEntry_DoNotUse::ModelConfig_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelConfig_ParametersEntry_DoNotUse::MergeFrom(const ModelConfig_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelConfig_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelConfig_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ModelConfig::_Internal {
 public:
  static const ::inference::ModelVersionPolicy& version_policy(const ModelConfig* msg);
  static const ::inference::ModelOptimizationPolicy& optimization(const ModelConfig* msg);
  static const ::inference::ModelDynamicBatching& dynamic_batching(const ModelConfig* msg);
  static const ::inference::ModelSequenceBatching& sequence_batching(const ModelConfig* msg);
  static const ::inference::ModelEnsembling& ensemble_scheduling(const ModelConfig* msg);
  static const ::inference::ModelOperations& model_operations(const ModelConfig* msg);
  static const ::inference::ModelTransactionPolicy& model_transaction_policy(const ModelConfig* msg);
};

const ::inference::ModelVersionPolicy&
ModelConfig::_Internal::version_policy(const ModelConfig* msg) {
  return *msg->version_policy_;
}
const ::inference::ModelOptimizationPolicy&
ModelConfig::_Internal::optimization(const ModelConfig* msg) {
  return *msg->optimization_;
}
const ::inference::ModelDynamicBatching&
ModelConfig::_Internal::dynamic_batching(const ModelConfig* msg) {
  return *msg->scheduling_choice_.dynamic_batching_;
}
const ::inference::ModelSequenceBatching&
ModelConfig::_Internal::sequence_batching(const ModelConfig* msg) {
  return *msg->scheduling_choice_.sequence_batching_;
}
const ::inference::ModelEnsembling&
ModelConfig::_Internal::ensemble_scheduling(const ModelConfig* msg) {
  return *msg->scheduling_choice_.ensemble_scheduling_;
}
const ::inference::ModelOperations&
ModelConfig::_Internal::model_operations(const ModelConfig* msg) {
  return *msg->model_operations_;
}
const ::inference::ModelTransactionPolicy&
ModelConfig::_Internal::model_transaction_policy(const ModelConfig* msg) {
  return *msg->model_transaction_policy_;
}
void ModelConfig::set_allocated_dynamic_batching(::inference::ModelDynamicBatching* dynamic_batching) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_scheduling_choice();
  if (dynamic_batching) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dynamic_batching);
    if (message_arena != submessage_arena) {
      dynamic_batching = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic_batching, submessage_arena);
    }
    set_has_dynamic_batching();
    scheduling_choice_.dynamic_batching_ = dynamic_batching;
  }
  // @@protoc_insertion_point(field_set_allocated:inference.ModelConfig.dynamic_batching)
}
void ModelConfig::set_allocated_sequence_batching(::inference::ModelSequenceBatching* sequence_batching) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_scheduling_choice();
  if (sequence_batching) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sequence_batching);
    if (message_arena != submessage_arena) {
      sequence_batching = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sequence_batching, submessage_arena);
    }
    set_has_sequence_batching();
    scheduling_choice_.sequence_batching_ = sequence_batching;
  }
  // @@protoc_insertion_point(field_set_allocated:inference.ModelConfig.sequence_batching)
}
void ModelConfig::set_allocated_ensemble_scheduling(::inference::ModelEnsembling* ensemble_scheduling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_scheduling_choice();
  if (ensemble_scheduling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ensemble_scheduling);
    if (message_arena != submessage_arena) {
      ensemble_scheduling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ensemble_scheduling, submessage_arena);
    }
    set_has_ensemble_scheduling();
    scheduling_choice_.ensemble_scheduling_ = ensemble_scheduling;
  }
  // @@protoc_insertion_point(field_set_allocated:inference.ModelConfig.ensemble_scheduling)
}
ModelConfig::ModelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_(arena),
  output_(arena),
  instance_group_(arena),
  cc_model_filenames_(arena),
  metric_tags_(arena),
  parameters_(arena),
  model_warmup_(arena),
  batch_input_(arena),
  batch_output_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:inference.ModelConfig)
}
ModelConfig::ModelConfig(const ModelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_(from.input_),
      output_(from.output_),
      instance_group_(from.instance_group_),
      model_warmup_(from.model_warmup_),
      batch_input_(from.batch_input_),
      batch_output_(from.batch_output_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cc_model_filenames_.MergeFrom(from.cc_model_filenames_);
  metric_tags_.MergeFrom(from.metric_tags_);
  parameters_.MergeFrom(from.parameters_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platform().empty()) {
    platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform(), 
      GetArena());
  }
  default_model_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_default_model_filename().empty()) {
    default_model_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_model_filename(), 
      GetArena());
  }
  backend_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_backend().empty()) {
    backend_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_backend(), 
      GetArena());
  }
  if (from._internal_has_version_policy()) {
    version_policy_ = new ::inference::ModelVersionPolicy(*from.version_policy_);
  } else {
    version_policy_ = nullptr;
  }
  if (from._internal_has_optimization()) {
    optimization_ = new ::inference::ModelOptimizationPolicy(*from.optimization_);
  } else {
    optimization_ = nullptr;
  }
  if (from._internal_has_model_operations()) {
    model_operations_ = new ::inference::ModelOperations(*from.model_operations_);
  } else {
    model_operations_ = nullptr;
  }
  if (from._internal_has_model_transaction_policy()) {
    model_transaction_policy_ = new ::inference::ModelTransactionPolicy(*from.model_transaction_policy_);
  } else {
    model_transaction_policy_ = nullptr;
  }
  max_batch_size_ = from.max_batch_size_;
  clear_has_scheduling_choice();
  switch (from.scheduling_choice_case()) {
    case kDynamicBatching: {
      _internal_mutable_dynamic_batching()->::inference::ModelDynamicBatching::MergeFrom(from._internal_dynamic_batching());
      break;
    }
    case kSequenceBatching: {
      _internal_mutable_sequence_batching()->::inference::ModelSequenceBatching::MergeFrom(from._internal_sequence_batching());
      break;
    }
    case kEnsembleScheduling: {
      _internal_mutable_ensemble_scheduling()->::inference::ModelEnsembling::MergeFrom(from._internal_ensemble_scheduling());
      break;
    }
    case SCHEDULING_CHOICE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:inference.ModelConfig)
}

void ModelConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelConfig_model_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_model_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backend_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&version_policy_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_batch_size_) -
      reinterpret_cast<char*>(&version_policy_)) + sizeof(max_batch_size_));
  clear_has_scheduling_choice();
}

ModelConfig::~ModelConfig() {
  // @@protoc_insertion_point(destructor:inference.ModelConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_model_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backend_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_policy_;
  if (this != internal_default_instance()) delete optimization_;
  if (this != internal_default_instance()) delete model_operations_;
  if (this != internal_default_instance()) delete model_transaction_policy_;
  if (has_scheduling_choice()) {
    clear_scheduling_choice();
  }
}

void ModelConfig::ArenaDtor(void* object) {
  ModelConfig* _this = reinterpret_cast< ModelConfig* >(object);
  (void)_this;
}
void ModelConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelConfig& ModelConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelConfig_model_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelConfig::clear_scheduling_choice() {
// @@protoc_insertion_point(one_of_clear_start:inference.ModelConfig)
  switch (scheduling_choice_case()) {
    case kDynamicBatching: {
      if (GetArena() == nullptr) {
        delete scheduling_choice_.dynamic_batching_;
      }
      break;
    }
    case kSequenceBatching: {
      if (GetArena() == nullptr) {
        delete scheduling_choice_.sequence_batching_;
      }
      break;
    }
    case kEnsembleScheduling: {
      if (GetArena() == nullptr) {
        delete scheduling_choice_.ensemble_scheduling_;
      }
      break;
    }
    case SCHEDULING_CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCHEDULING_CHOICE_NOT_SET;
}


void ModelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:inference.ModelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  output_.Clear();
  instance_group_.Clear();
  cc_model_filenames_.Clear();
  metric_tags_.Clear();
  parameters_.Clear();
  model_warmup_.Clear();
  batch_input_.Clear();
  batch_output_.Clear();
  name_.ClearToEmpty();
  platform_.ClearToEmpty();
  default_model_filename_.ClearToEmpty();
  backend_.ClearToEmpty();
  if (GetArena() == nullptr && version_policy_ != nullptr) {
    delete version_policy_;
  }
  version_policy_ = nullptr;
  if (GetArena() == nullptr && optimization_ != nullptr) {
    delete optimization_;
  }
  optimization_ = nullptr;
  if (GetArena() == nullptr && model_operations_ != nullptr) {
    delete model_operations_;
  }
  model_operations_ = nullptr;
  if (GetArena() == nullptr && model_transaction_policy_ != nullptr) {
    delete model_transaction_policy_;
  }
  model_transaction_policy_ = nullptr;
  max_batch_size_ = 0;
  clear_scheduling_choice();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelConfig.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelConfig.platform"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelVersionPolicy version_policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_version_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_batch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .inference.ModelInput input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .inference.ModelOutput output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .inference.ModelInstanceGroup instance_group = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instance_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string default_model_filename = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_default_model_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelConfig.default_model_filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> cc_model_filenames = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cc_model_filenames_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> metric_tags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metric_tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .inference.ModelDynamicBatching dynamic_batching = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic_batching(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelOptimizationPolicy optimization = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelSequenceBatching sequence_batching = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sequence_batching(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .inference.ModelParameter> parameters = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // .inference.ModelEnsembling ensemble_scheduling = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ensemble_scheduling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .inference.ModelWarmup model_warmup = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_model_warmup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // string backend = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_backend();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "inference.ModelConfig.backend"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelOperations model_operations = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_operations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .inference.ModelTransactionPolicy model_transaction_policy = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_transaction_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .inference.BatchInput batch_input = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_batch_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .inference.BatchOutput batch_output = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_batch_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inference.ModelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string platform = 2;
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelConfig.platform");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_platform(), target);
  }

  // .inference.ModelVersionPolicy version_policy = 3;
  if (this->has_version_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::version_policy(this), target, stream);
  }

  // int32 max_batch_size = 4;
  if (this->max_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_batch_size(), target);
  }

  // repeated .inference.ModelInput input = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_input(i), target, stream);
  }

  // repeated .inference.ModelOutput output = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_output(i), target, stream);
  }

  // repeated .inference.ModelInstanceGroup instance_group = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instance_group_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_instance_group(i), target, stream);
  }

  // string default_model_filename = 8;
  if (this->default_model_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_model_filename().data(), static_cast<int>(this->_internal_default_model_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelConfig.default_model_filename");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_default_model_filename(), target);
  }

  // map<string, string> cc_model_filenames = 9;
  if (!this->_internal_cc_model_filenames().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelConfig.CcModelFilenamesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelConfig.CcModelFilenamesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cc_model_filenames().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cc_model_filenames().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_cc_model_filenames().begin();
          it != this->_internal_cc_model_filenames().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelConfig_CcModelFilenamesEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_cc_model_filenames().begin();
          it != this->_internal_cc_model_filenames().end(); ++it) {
        target = ModelConfig_CcModelFilenamesEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> metric_tags = 10;
  if (!this->_internal_metric_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelConfig.MetricTagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelConfig.MetricTagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metric_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metric_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metric_tags().begin();
          it != this->_internal_metric_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelConfig_MetricTagsEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metric_tags().begin();
          it != this->_internal_metric_tags().end(); ++it) {
        target = ModelConfig_MetricTagsEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .inference.ModelDynamicBatching dynamic_batching = 11;
  if (_internal_has_dynamic_batching()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::dynamic_batching(this), target, stream);
  }

  // .inference.ModelOptimizationPolicy optimization = 12;
  if (this->has_optimization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::optimization(this), target, stream);
  }

  // .inference.ModelSequenceBatching sequence_batching = 13;
  if (_internal_has_sequence_batching()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sequence_batching(this), target, stream);
  }

  // map<string, .inference.ModelParameter> parameters = 14;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelParameter >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "inference.ModelConfig.ParametersEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelParameter >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelParameter >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelConfig_ParametersEntry_DoNotUse::Funcs::InternalSerialize(14, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelParameter >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = ModelConfig_ParametersEntry_DoNotUse::Funcs::InternalSerialize(14, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .inference.ModelEnsembling ensemble_scheduling = 15;
  if (_internal_has_ensemble_scheduling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::ensemble_scheduling(this), target, stream);
  }

  // repeated .inference.ModelWarmup model_warmup = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_warmup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_model_warmup(i), target, stream);
  }

  // string backend = 17;
  if (this->backend().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backend().data(), static_cast<int>(this->_internal_backend().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inference.ModelConfig.backend");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_backend(), target);
  }

  // .inference.ModelOperations model_operations = 18;
  if (this->has_model_operations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::model_operations(this), target, stream);
  }

  // .inference.ModelTransactionPolicy model_transaction_policy = 19;
  if (this->has_model_transaction_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::model_transaction_policy(this), target, stream);
  }

  // repeated .inference.BatchInput batch_input = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_batch_input_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_batch_input(i), target, stream);
  }

  // repeated .inference.BatchOutput batch_output = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_batch_output_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_batch_output(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inference.ModelConfig)
  return target;
}

size_t ModelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inference.ModelConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .inference.ModelInput input = 5;
  total_size += 1UL * this->_internal_input_size();
  for (const auto& msg : this->input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .inference.ModelOutput output = 6;
  total_size += 1UL * this->_internal_output_size();
  for (const auto& msg : this->output_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .inference.ModelInstanceGroup instance_group = 7;
  total_size += 1UL * this->_internal_instance_group_size();
  for (const auto& msg : this->instance_group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> cc_model_filenames = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cc_model_filenames_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_cc_model_filenames().begin();
      it != this->_internal_cc_model_filenames().end(); ++it) {
    total_size += ModelConfig_CcModelFilenamesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> metric_tags = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metric_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metric_tags().begin();
      it != this->_internal_metric_tags().end(); ++it) {
    total_size += ModelConfig_MetricTagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .inference.ModelParameter> parameters = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::inference::ModelParameter >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += ModelConfig_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .inference.ModelWarmup model_warmup = 16;
  total_size += 2UL * this->_internal_model_warmup_size();
  for (const auto& msg : this->model_warmup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .inference.BatchInput batch_input = 20;
  total_size += 2UL * this->_internal_batch_input_size();
  for (const auto& msg : this->batch_input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .inference.BatchOutput batch_output = 21;
  total_size += 2UL * this->_internal_batch_output_size();
  for (const auto& msg : this->batch_output_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string platform = 2;
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  // string default_model_filename = 8;
  if (this->default_model_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_model_filename());
  }

  // string backend = 17;
  if (this->backend().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_backend());
  }

  // .inference.ModelVersionPolicy version_policy = 3;
  if (this->has_version_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_policy_);
  }

  // .inference.ModelOptimizationPolicy optimization = 12;
  if (this->has_optimization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optimization_);
  }

  // .inference.ModelOperations model_operations = 18;
  if (this->has_model_operations()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_operations_);
  }

  // .inference.ModelTransactionPolicy model_transaction_policy = 19;
  if (this->has_model_transaction_policy()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_transaction_policy_);
  }

  // int32 max_batch_size = 4;
  if (this->max_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_batch_size());
  }

  switch (scheduling_choice_case()) {
    // .inference.ModelDynamicBatching dynamic_batching = 11;
    case kDynamicBatching: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scheduling_choice_.dynamic_batching_);
      break;
    }
    // .inference.ModelSequenceBatching sequence_batching = 13;
    case kSequenceBatching: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scheduling_choice_.sequence_batching_);
      break;
    }
    // .inference.ModelEnsembling ensemble_scheduling = 15;
    case kEnsembleScheduling: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scheduling_choice_.ensemble_scheduling_);
      break;
    }
    case SCHEDULING_CHOICE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inference.ModelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inference.ModelConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inference.ModelConfig)
    MergeFrom(*source);
  }
}

void ModelConfig::MergeFrom(const ModelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inference.ModelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  instance_group_.MergeFrom(from.instance_group_);
  cc_model_filenames_.MergeFrom(from.cc_model_filenames_);
  metric_tags_.MergeFrom(from.metric_tags_);
  parameters_.MergeFrom(from.parameters_);
  model_warmup_.MergeFrom(from.model_warmup_);
  batch_input_.MergeFrom(from.batch_input_);
  batch_output_.MergeFrom(from.batch_output_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.platform().size() > 0) {
    _internal_set_platform(from._internal_platform());
  }
  if (from.default_model_filename().size() > 0) {
    _internal_set_default_model_filename(from._internal_default_model_filename());
  }
  if (from.backend().size() > 0) {
    _internal_set_backend(from._internal_backend());
  }
  if (from.has_version_policy()) {
    _internal_mutable_version_policy()->::inference::ModelVersionPolicy::MergeFrom(from._internal_version_policy());
  }
  if (from.has_optimization()) {
    _internal_mutable_optimization()->::inference::ModelOptimizationPolicy::MergeFrom(from._internal_optimization());
  }
  if (from.has_model_operations()) {
    _internal_mutable_model_operations()->::inference::ModelOperations::MergeFrom(from._internal_model_operations());
  }
  if (from.has_model_transaction_policy()) {
    _internal_mutable_model_transaction_policy()->::inference::ModelTransactionPolicy::MergeFrom(from._internal_model_transaction_policy());
  }
  if (from.max_batch_size() != 0) {
    _internal_set_max_batch_size(from._internal_max_batch_size());
  }
  switch (from.scheduling_choice_case()) {
    case kDynamicBatching: {
      _internal_mutable_dynamic_batching()->::inference::ModelDynamicBatching::MergeFrom(from._internal_dynamic_batching());
      break;
    }
    case kSequenceBatching: {
      _internal_mutable_sequence_batching()->::inference::ModelSequenceBatching::MergeFrom(from._internal_sequence_batching());
      break;
    }
    case kEnsembleScheduling: {
      _internal_mutable_ensemble_scheduling()->::inference::ModelEnsembling::MergeFrom(from._internal_ensemble_scheduling());
      break;
    }
    case SCHEDULING_CHOICE_NOT_SET: {
      break;
    }
  }
}

void ModelConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inference.ModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfig::CopyFrom(const ModelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inference.ModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfig::IsInitialized() const {
  return true;
}

void ModelConfig::InternalSwap(ModelConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_.InternalSwap(&other->input_);
  output_.InternalSwap(&other->output_);
  instance_group_.InternalSwap(&other->instance_group_);
  cc_model_filenames_.Swap(&other->cc_model_filenames_);
  metric_tags_.Swap(&other->metric_tags_);
  parameters_.Swap(&other->parameters_);
  model_warmup_.InternalSwap(&other->model_warmup_);
  batch_input_.InternalSwap(&other->batch_input_);
  batch_output_.InternalSwap(&other->batch_output_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  default_model_filename_.Swap(&other->default_model_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  backend_.Swap(&other->backend_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelConfig, max_batch_size_)
      + sizeof(ModelConfig::max_batch_size_)
      - PROTOBUF_FIELD_OFFSET(ModelConfig, version_policy_)>(
          reinterpret_cast<char*>(&version_policy_),
          reinterpret_cast<char*>(&other->version_policy_));
  swap(scheduling_choice_, other->scheduling_choice_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace inference
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::inference::ModelRateLimiter_Resource* Arena::CreateMaybeMessage< ::inference::ModelRateLimiter_Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelRateLimiter_Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelRateLimiter* Arena::CreateMaybeMessage< ::inference::ModelRateLimiter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelRateLimiter >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelInstanceGroup* Arena::CreateMaybeMessage< ::inference::ModelInstanceGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelInstanceGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelTensorReshape* Arena::CreateMaybeMessage< ::inference::ModelTensorReshape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelTensorReshape >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelInput* Arena::CreateMaybeMessage< ::inference::ModelInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelInput >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOutput* Arena::CreateMaybeMessage< ::inference::ModelOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::BatchInput* Arena::CreateMaybeMessage< ::inference::BatchInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::BatchInput >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::BatchOutput* Arena::CreateMaybeMessage< ::inference::BatchOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::BatchOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelVersionPolicy_Latest* Arena::CreateMaybeMessage< ::inference::ModelVersionPolicy_Latest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelVersionPolicy_Latest >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelVersionPolicy_All* Arena::CreateMaybeMessage< ::inference::ModelVersionPolicy_All >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelVersionPolicy_All >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelVersionPolicy_Specific* Arena::CreateMaybeMessage< ::inference::ModelVersionPolicy_Specific >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelVersionPolicy_Specific >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelVersionPolicy* Arena::CreateMaybeMessage< ::inference::ModelVersionPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelVersionPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy_Graph* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy_Graph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy_Graph >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_Shape >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound_InputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy_Cuda_GraphSpec_InputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy_Cuda_GraphSpec* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy_Cuda_GraphSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy_Cuda_GraphSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy_Cuda* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy_Cuda >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy_Cuda >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy_ExecutionAccelerators_Accelerator >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy_ExecutionAccelerators* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy_ExecutionAccelerators >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy_ExecutionAccelerators >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy_PinnedMemoryBuffer* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy_PinnedMemoryBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy_PinnedMemoryBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOptimizationPolicy* Arena::CreateMaybeMessage< ::inference::ModelOptimizationPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOptimizationPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelQueuePolicy* Arena::CreateMaybeMessage< ::inference::ModelQueuePolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelQueuePolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse* Arena::CreateMaybeMessage< ::inference::ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelDynamicBatching_PriorityQueuePolicyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelDynamicBatching* Arena::CreateMaybeMessage< ::inference::ModelDynamicBatching >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelDynamicBatching >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelSequenceBatching_Control* Arena::CreateMaybeMessage< ::inference::ModelSequenceBatching_Control >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelSequenceBatching_Control >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelSequenceBatching_ControlInput* Arena::CreateMaybeMessage< ::inference::ModelSequenceBatching_ControlInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelSequenceBatching_ControlInput >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelSequenceBatching_StrategyDirect* Arena::CreateMaybeMessage< ::inference::ModelSequenceBatching_StrategyDirect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelSequenceBatching_StrategyDirect >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelSequenceBatching_StrategyOldest* Arena::CreateMaybeMessage< ::inference::ModelSequenceBatching_StrategyOldest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelSequenceBatching_StrategyOldest >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelSequenceBatching* Arena::CreateMaybeMessage< ::inference::ModelSequenceBatching >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelSequenceBatching >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelEnsembling_Step_InputMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::inference::ModelEnsembling_Step_InputMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelEnsembling_Step_InputMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelEnsembling_Step_OutputMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::inference::ModelEnsembling_Step_OutputMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelEnsembling_Step_OutputMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelEnsembling_Step* Arena::CreateMaybeMessage< ::inference::ModelEnsembling_Step >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelEnsembling_Step >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelEnsembling* Arena::CreateMaybeMessage< ::inference::ModelEnsembling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelEnsembling >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelParameter* Arena::CreateMaybeMessage< ::inference::ModelParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelWarmup_Input* Arena::CreateMaybeMessage< ::inference::ModelWarmup_Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelWarmup_Input >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelWarmup_InputsEntry_DoNotUse* Arena::CreateMaybeMessage< ::inference::ModelWarmup_InputsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelWarmup_InputsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelWarmup* Arena::CreateMaybeMessage< ::inference::ModelWarmup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelWarmup >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelOperations* Arena::CreateMaybeMessage< ::inference::ModelOperations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelOperations >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelTransactionPolicy* Arena::CreateMaybeMessage< ::inference::ModelTransactionPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelTransactionPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelConfig_CcModelFilenamesEntry_DoNotUse* Arena::CreateMaybeMessage< ::inference::ModelConfig_CcModelFilenamesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelConfig_CcModelFilenamesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelConfig_MetricTagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::inference::ModelConfig_MetricTagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelConfig_MetricTagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelConfig_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::inference::ModelConfig_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelConfig_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::inference::ModelConfig* Arena::CreateMaybeMessage< ::inference::ModelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inference::ModelConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
